{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/switchTab.js","path":"js/switchTab.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1520935261015},{"_id":"themes/BlueLake/README.en.md","hash":"6cc6e346635bf26dd71030b9c3c6443507cd4108","modified":1520935261016},{"_id":"themes/BlueLake/_config.yml","hash":"9b6011672276b037b88c8463bc6e751b14252a05","modified":1521714760817},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1520935261074},{"_id":"themes/BlueLake/README.md","hash":"66c3ef7a779b6d65bad90daa2e03bcb7a1bb742f","modified":1520935261018},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1520935261023},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"a127deb32d1df69bbe50a3824a5f90472513c9c3","modified":1520935261022},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1520935261025},{"_id":"themes/BlueLake/languages/tr.yml","hash":"b8169c9766bfd6e8b5c036eb50ad4ad5fffd24e1","modified":1520935261028},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1520935261027},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1520935261031},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1520935261026},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1520935261030},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1520935261064},{"_id":"themes/BlueLake/layout/base.jade","hash":"ee19d63543f898336dee846ed45d932239c40fe0","modified":1520935261066},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1521101289294},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1520935261072},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1520935261070},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1520935261073},{"_id":"source/_posts/Js事件机制（上）.md","hash":"6ee5913c467735ad0b0bb97ae878617943b3cdc6","modified":1521707907537},{"_id":"source/_posts/Js事件机制（下）.md","hash":"488d9a9b22e74997a9e99a556894d0858004bcab","modified":1521178821785},{"_id":"source/_posts/es6之let.md","hash":"4b38cf4337f111e30383e60a0f61442e0f71bdad","modified":1520935260921},{"_id":"source/_posts/css之圣杯布局.md","hash":"f05745e03ae56edfa486e943a7460f7150edd996","modified":1521714597853},{"_id":"source/_posts/javascript权威指南-第三章（类型）.md","hash":"57cb444ed65b5c2c0a608b9fe4f3febd92a05390","modified":1520935260922},{"_id":"source/_posts/2017年小结.md","hash":"ca474ad72f16414aade793a4a382a151ba3a9055","modified":1520935260916},{"_id":"source/_posts/javascript权威指南-第二十章（客户端存储）.md","hash":"2d0e92f794fec90440aec5caf07bfd51fd7ef50d","modified":1520935260923},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1520935261076},{"_id":"source/about/index.md","hash":"931e1a2b6de2d8b9d272aff18e3619ec82d7de00","modified":1520935260926},{"_id":"themes/BlueLake/source/favicon.ico","hash":"6d352d98ad3f628d333135bafbb41c98e7588172","modified":1521099793020},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1520935261067},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1520935261035},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1520935261037},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"d7985aa1e568010142e942690bd45fd9de2f3fa9","modified":1521102663052},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"c3eb1e71a71c7b01d53ffcf2dc16979d440f63aa","modified":1520935261040},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1520935261038},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1520935261042},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1520935261045},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1520935261047},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1520935261044},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1520935261041},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1520935261048},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1520935261049},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1520935261051},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1520935261052},{"_id":"themes/BlueLake/layout/_partial/switchTab.jade","hash":"ca4fc865219d3fa255da20d74eceb32b74622630","modified":1521101052303},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1520935261054},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1520935261057},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1520935261059},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1520935261060},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1520935261063},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1520935261061},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1520935261056},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1520935261079},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1520935261080},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1520935261083},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1520935261085},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1520935261086},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1520935261088},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1520935261093},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1520935261094},{"_id":"themes/BlueLake/source/js/switchTab.js","hash":"cd5cab8e1c4fc3f807643d853fc9158ebb92b79d","modified":1521102862444},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1520935261095},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1520935261090},{"_id":"public/baidusitemap.xml","hash":"a6705d7570b67ae52b2f76a41b765dcfe39aa966","modified":1521714777234},{"_id":"public/atom.xml","hash":"24ce8d5eb6f6e2e01d7c8601dc56f8e23a5b8a05","modified":1521714777236},{"_id":"public/sitemap.xml","hash":"dfa4232224d322e9556ad6d83f8bf043e1079e9c","modified":1521714777237},{"_id":"public/content.json","hash":"2e076db59d7df614e3acd03b83261d045bc4cd81","modified":1521714777237},{"_id":"public/about/index.html","hash":"7ac20885cfdc30a204fc5c2272a0c664560a79b8","modified":1521714777309},{"_id":"public/2018/03/13/2017年小结/index.html","hash":"9ac0eee6c9edac3ea0396d7799d0009af872f30b","modified":1521714777312},{"_id":"public/2018/03/13/javascript权威指南-第三章（类型）/index.html","hash":"05ae6dc5c41597df5f1e77a97cdde5315ebb90ac","modified":1521714777312},{"_id":"public/2018/03/13/es6之let/index.html","hash":"f8aa65c5d3a174d37d69ef19f947879d699bae2a","modified":1521714777312},{"_id":"public/2018/03/21/css之圣杯布局/index.html","hash":"b1424d286345dcd3d4a7d9dbd65305799881df24","modified":1521714777312},{"_id":"public/2018/03/14/Js事件机制（下）/index.html","hash":"73174a74e3d06dc0f4c60456725d725dff7bde92","modified":1521714777312},{"_id":"public/2018/03/13/javascript权威指南-第二十章（客户端存储）/index.html","hash":"b71b98c6453c266259ccb9e9d625a753d6378faf","modified":1521714777312},{"_id":"public/2018/03/13/Js事件机制（上）/index.html","hash":"f235862d88a75d18e18f8c9f0bc48e4462cbf9c6","modified":1521714777313},{"_id":"public/archives/index.html","hash":"05010210b91679355e41a2fc08029cdd84c4a9d9","modified":1521714777353},{"_id":"public/archives/2018/index.html","hash":"05010210b91679355e41a2fc08029cdd84c4a9d9","modified":1521714777353},{"_id":"public/archives/2018/03/index.html","hash":"05010210b91679355e41a2fc08029cdd84c4a9d9","modified":1521714777353},{"_id":"public/categories/JavaScript/index.html","hash":"6199fe70a337264c24d9014185c8683396c4e791","modified":1521714777353},{"_id":"public/categories/CSS/index.html","hash":"7b1f09c9d5cc7355f31c7b00112c653100224da1","modified":1521714777353},{"_id":"public/categories/读书笔记/index.html","hash":"63a4c80a269ec191f27a27e60295d70bd71ca369","modified":1521714777353},{"_id":"public/categories/Diary/index.html","hash":"30beb0c105b5018755171b35739253b1e26469ae","modified":1521714777354},{"_id":"public/tags/Javascript事件/index.html","hash":"ac40c759e429f257f30a48211675598642c0f434","modified":1521714777354},{"_id":"public/index.html","hash":"80bc638d365d8c85e491bee2141085535096b82a","modified":1521714777354},{"_id":"public/tags/页面布局/index.html","hash":"ad045a5acbba0736b30c2454bd766ae7efcb884c","modified":1521714777354},{"_id":"public/tags/es6/index.html","hash":"6c98387d8c3067cbb2d5acf4bbb8872cf32e7738","modified":1521714777354},{"_id":"public/tags/读书笔记/index.html","hash":"f580673e140ab1543d510fd0c17fb34febba4efb","modified":1521714777354},{"_id":"public/tags/随便写写/index.html","hash":"35cfef2d76de2a971eb0dcfdbe083e66086fba6e","modified":1521714777354},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1521714777354},{"_id":"public/favicon.ico","hash":"6d352d98ad3f628d333135bafbb41c98e7588172","modified":1521714777355},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1521714777355},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1521714777355},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1521714777355},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1521714777870},{"_id":"public/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1521714777871},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1521714777880},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1521714777881},{"_id":"public/js/switchTab.js","hash":"aeec80861657c28c7e1b13ee9c20861c6d010276","modified":1521714777883},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1521714777884},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1521714777884},{"_id":"public/css/style.css","hash":"45a02c24123d7107ed700c695506d5ef7c274fc1","modified":1521714777884}],"Category":[{"name":"JavaScript","_id":"cjf2dos39000158qgyczvkjqc"},{"name":"CSS","_id":"cjf2dos4p000a58qg79rntk1v"},{"name":"读书笔记","_id":"cjf2dos4v000g58qgpcpl1nyl"},{"name":"Diary","_id":"cjf2dos50000n58qgo51jjtd8"}],"Data":[],"Page":[{"title":"about","date":"2018-03-13T05:16:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-03-13 13:16:33\n---\n","updated":"2018-03-13T10:01:00.926Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjf2dos4g000658qgcd92kjwy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Js事件机制（上）","date":"2018-03-13T07:04:46.000Z","_content":"很早就想好好总结一下事件机制了，终于有动力写了。文章分为上下2部分\nJS和HTML的交互是通过事件来实现的。事件就是文档中发生的一些特定的交互瞬间。\n\n## 事件流\n> 当浏览器发展到第四代时（IE4 和  netscape Communicator 4）,开发团队遇到了一个有意思的问题：页面的哪一部分会拥有某个特定的事件，可以想象在一张纸上画一组同心圆，如果把手指放在圆心上，那么你的手指指向的不是一个圆，而是所有的圆。2家公司看待事件的想法是一致的。当你点击了一个按钮，他们都认为是点击不仅仅发生在按钮上。也就是说 当你点击按钮，你也点击了按钮的容器元素，甚至可以说点击了整个页面。\n**事件流**描述的是，页面接收事件的顺序。IE和Netscape开发团队居然提出了完全相反的事件流的概念。IE的事件流是事件冒泡流，netScape是事件捕获流。\n\n\n![image](http://upload-images.jianshu.io/upload_images/7821791-664099d3b7629a47..jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 事件冒泡\nIE的事件流流叫事件冒泡（event bubbling）\n所有的现代浏览器都是支持事件冒泡，但是具体实现上有一点区别。\n*IE5.5及其更早的版本会跳过html直接到document*\n\n#### 事件捕获\nnetscape 团队提出的另一种事件流叫事件捕获。事件捕获的思想是不太具体的节点应该更早的接收到事件，具体的节点应该最后接受到事件。它的目的是在事件到达预定目标之前捕获它。\n\n#### DOM事件流\n> IE9、Opera、Firefox、Chrome、Safari都是支持DOM事件流的。**IE8及更早的版本不支持**\n\nDOM 2级事件规定事件流包括3个阶段，事件捕获阶段、处于目标阶段、事件冒泡阶段。\n首先发生的事件捕获，为截取事件提供了机会。然后是实际的目标接受事件，最后一个阶段是冒泡阶段。\n## DOM事件级别\nDom事件主要分为3个级别，DOM 0 级、DOM2级、DOM3级，但是还有一个HTML事件，直接内嵌在HTML里面的。\n\n#### HTML事件\n```html\n<button onclick = \"handleClick()\">click</button>\n<script>\n  function handleClick(){\n    console.log('do something')\n  }\n<script>\n```\n这种强耦合的的事件方法存在2个弊端，首先是时差问题，用户可能在HTML元素一渲染在页面的时候就点击按钮，但是当时的事件处理程序组可能还没有执行条件，比如这个demo中handleClick是在页面的最底部定义的，如果用户在页面解析handleClick函数之前就点击了按钮，会引发错误。\n其次这种强耦合也是不被提倡的。\n\n#### DOM 0 级事件\n```html\n<button id = ‘myBtn’>click</button>\n<script>\n  var btn = document.getElementById('myBtn')\n  btn.onclick = function (){\n    console.log('do something', this.id)\n  }\n<script>\n```\nDOM 0 级事件是将一个函数赋给一个dom对象的处理函数属性。\n可以通过给事件处理属性赋值null来解绑事件。\n这个demo中就是讲函数赋给了btn的onclick属性\n通过以下的demo可以看出来，**DOM 0 级事件的处理程序会在捕获阶段被处理。**\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <body>\n        <div id=\"box\" style=\"height:100px;width:300px;background-color:pink;\"></div>\n        <button id=\"reset\">还原</button>\n        <script>\n            //IE8-浏览器返回div body html document\n            //其他浏览器返回div body html document window\n            reset.onclick = function () {\n                history.go();\n            }\n            box.onclick = function () {\n                box.innerHTML += 'div\\n';\n            }\n            document.body.onclick = function () {\n                box.innerHTML += 'body\\n';\n            }\n            document.documentElement.onclick = function () {\n                box.innerHTML += 'html\\n';\n            }\n            document.onclick = function () {\n                box.innerHTML += 'document\\n';\n            }\n            window.onclick = function () {\n                box.innerHTML += 'window\\n';\n            }\n        </script\n    </body>\n</html>\n```\n\n#### DOM 2 级事件\n > IE9、Firefix、Safari、Chrome、Opera支持DOM 2 级事件处理程序\n\nDom 2 级事件定义了2个方法，用于指定和删除事件处理程序：addEventListener 和 removeEventListener。\n他们都接受3个参数\n* 需要处理的事件名：click，scroll，focuse // **注意没有 on，不是onclick**\n* 事件的处理函数： 可以是函数名字\n* useCapture： true表示在捕获阶段调用处理程序，false表示冒泡阶段调用。*默认为false*\n\nremoveEventListener的事件处理程序函数必须与addEventListener的相同。匿名函数没办法移除\n```js\nbtn.addEventListener(\"click\", handleClick, true)\nbtn.removeEventListener(\"click\", handleClick, true)\n```\n大多数情况下，都是将是将事件处理程序添加到时间流的冒泡阶段，这样可以最大限度的兼容各种浏览器，但是也不排除有些场合需要在到达目标事件之前捕获它。\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <body>\n        <div id=\"box\" style=\"height:100px;width:300px;background-color:pink;\"></div>\n        <button id=\"reset\">还原</button>\n        <script>\n            //IE8-浏览器不支持\n            //其他浏览器返回window document html body div\n            reset.onclick = function () {\n                history.go();\n            }\n            box.addEventListener('click', function () {\n                box.innerHTML += 'div\\n'\n            }, true)\n            document.body.addEventListener('click', function () {\n                box.innerHTML += 'body\\n';\n            }, true);\n            document.documentElement.addEventListener('click', function () {\n                box.innerHTML += 'html\\n';\n            }, true);\n            document.addEventListener('click', function () {\n                box.innerHTML += 'document\\n';\n            }, true);\n            window.addEventListener('click', function () {\n                box.innerHTML += 'window\\n';\n            }, true);\n        </script>\n    </body>\n</html>\n```\n#### DOM 3 级事件\nDOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：\n* UI事件，当用户与页面上的元素交互时触发，如：load、scroll\n* 焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n* 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n* 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n* 文本事件，当在文档中输入文本时触发，如：textInput\n* 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n* 合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n* 变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n\n### IE事件处理程序\n> 支持IE事件处理程序的浏览器只有IE和Opera\n\n上文说到IE9以后才支持addEventListener和removeEventListener，IE9以前浏览器有类似的方法，attachEvent和detachEvent，但是这2个方法只接受2个参数，事件名称和事件处理程序函数。由于IE8及其之前的版本并不支持DOM事件流，只有事件冒泡，所以没有第三个参数也是意料之中的。\n那这个和DOM 0 级事件有什么区别呢？\nDOM 0 级事件处理函数中的this指代的是当前DOM元素，attachEvent中this指代的是window\n```js\nlet btn = document.getElementById(\"myBtn\")\nbtn.attachEventListener(\"onclick\",function(){\n  console.log(\"clicked\")\n})\nbtn.attachEventListener(\"onclick\",function(){\n  console.log(\"hello world\")\n})\n```\n顺序是先hello world 再clicked，这是和addEventListener不一样的地方。还有就是\"click\"&&\"onclick\"\n\n## 小结\n本文介绍了事件流和几种不同级别的DOM事件，不同浏览器的处理方式需要认真对待。\n\n","source":"_posts/Js事件机制（上）.md","raw":"---\ntitle: Js事件机制（上）\ndate: 2018-03-13 15:04:46\ntags: Javascript事件\ncategory: JavaScript\n---\n很早就想好好总结一下事件机制了，终于有动力写了。文章分为上下2部分\nJS和HTML的交互是通过事件来实现的。事件就是文档中发生的一些特定的交互瞬间。\n\n## 事件流\n> 当浏览器发展到第四代时（IE4 和  netscape Communicator 4）,开发团队遇到了一个有意思的问题：页面的哪一部分会拥有某个特定的事件，可以想象在一张纸上画一组同心圆，如果把手指放在圆心上，那么你的手指指向的不是一个圆，而是所有的圆。2家公司看待事件的想法是一致的。当你点击了一个按钮，他们都认为是点击不仅仅发生在按钮上。也就是说 当你点击按钮，你也点击了按钮的容器元素，甚至可以说点击了整个页面。\n**事件流**描述的是，页面接收事件的顺序。IE和Netscape开发团队居然提出了完全相反的事件流的概念。IE的事件流是事件冒泡流，netScape是事件捕获流。\n\n\n![image](http://upload-images.jianshu.io/upload_images/7821791-664099d3b7629a47..jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 事件冒泡\nIE的事件流流叫事件冒泡（event bubbling）\n所有的现代浏览器都是支持事件冒泡，但是具体实现上有一点区别。\n*IE5.5及其更早的版本会跳过html直接到document*\n\n#### 事件捕获\nnetscape 团队提出的另一种事件流叫事件捕获。事件捕获的思想是不太具体的节点应该更早的接收到事件，具体的节点应该最后接受到事件。它的目的是在事件到达预定目标之前捕获它。\n\n#### DOM事件流\n> IE9、Opera、Firefox、Chrome、Safari都是支持DOM事件流的。**IE8及更早的版本不支持**\n\nDOM 2级事件规定事件流包括3个阶段，事件捕获阶段、处于目标阶段、事件冒泡阶段。\n首先发生的事件捕获，为截取事件提供了机会。然后是实际的目标接受事件，最后一个阶段是冒泡阶段。\n## DOM事件级别\nDom事件主要分为3个级别，DOM 0 级、DOM2级、DOM3级，但是还有一个HTML事件，直接内嵌在HTML里面的。\n\n#### HTML事件\n```html\n<button onclick = \"handleClick()\">click</button>\n<script>\n  function handleClick(){\n    console.log('do something')\n  }\n<script>\n```\n这种强耦合的的事件方法存在2个弊端，首先是时差问题，用户可能在HTML元素一渲染在页面的时候就点击按钮，但是当时的事件处理程序组可能还没有执行条件，比如这个demo中handleClick是在页面的最底部定义的，如果用户在页面解析handleClick函数之前就点击了按钮，会引发错误。\n其次这种强耦合也是不被提倡的。\n\n#### DOM 0 级事件\n```html\n<button id = ‘myBtn’>click</button>\n<script>\n  var btn = document.getElementById('myBtn')\n  btn.onclick = function (){\n    console.log('do something', this.id)\n  }\n<script>\n```\nDOM 0 级事件是将一个函数赋给一个dom对象的处理函数属性。\n可以通过给事件处理属性赋值null来解绑事件。\n这个demo中就是讲函数赋给了btn的onclick属性\n通过以下的demo可以看出来，**DOM 0 级事件的处理程序会在捕获阶段被处理。**\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <body>\n        <div id=\"box\" style=\"height:100px;width:300px;background-color:pink;\"></div>\n        <button id=\"reset\">还原</button>\n        <script>\n            //IE8-浏览器返回div body html document\n            //其他浏览器返回div body html document window\n            reset.onclick = function () {\n                history.go();\n            }\n            box.onclick = function () {\n                box.innerHTML += 'div\\n';\n            }\n            document.body.onclick = function () {\n                box.innerHTML += 'body\\n';\n            }\n            document.documentElement.onclick = function () {\n                box.innerHTML += 'html\\n';\n            }\n            document.onclick = function () {\n                box.innerHTML += 'document\\n';\n            }\n            window.onclick = function () {\n                box.innerHTML += 'window\\n';\n            }\n        </script\n    </body>\n</html>\n```\n\n#### DOM 2 级事件\n > IE9、Firefix、Safari、Chrome、Opera支持DOM 2 级事件处理程序\n\nDom 2 级事件定义了2个方法，用于指定和删除事件处理程序：addEventListener 和 removeEventListener。\n他们都接受3个参数\n* 需要处理的事件名：click，scroll，focuse // **注意没有 on，不是onclick**\n* 事件的处理函数： 可以是函数名字\n* useCapture： true表示在捕获阶段调用处理程序，false表示冒泡阶段调用。*默认为false*\n\nremoveEventListener的事件处理程序函数必须与addEventListener的相同。匿名函数没办法移除\n```js\nbtn.addEventListener(\"click\", handleClick, true)\nbtn.removeEventListener(\"click\", handleClick, true)\n```\n大多数情况下，都是将是将事件处理程序添加到时间流的冒泡阶段，这样可以最大限度的兼容各种浏览器，但是也不排除有些场合需要在到达目标事件之前捕获它。\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <body>\n        <div id=\"box\" style=\"height:100px;width:300px;background-color:pink;\"></div>\n        <button id=\"reset\">还原</button>\n        <script>\n            //IE8-浏览器不支持\n            //其他浏览器返回window document html body div\n            reset.onclick = function () {\n                history.go();\n            }\n            box.addEventListener('click', function () {\n                box.innerHTML += 'div\\n'\n            }, true)\n            document.body.addEventListener('click', function () {\n                box.innerHTML += 'body\\n';\n            }, true);\n            document.documentElement.addEventListener('click', function () {\n                box.innerHTML += 'html\\n';\n            }, true);\n            document.addEventListener('click', function () {\n                box.innerHTML += 'document\\n';\n            }, true);\n            window.addEventListener('click', function () {\n                box.innerHTML += 'window\\n';\n            }, true);\n        </script>\n    </body>\n</html>\n```\n#### DOM 3 级事件\nDOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：\n* UI事件，当用户与页面上的元素交互时触发，如：load、scroll\n* 焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n* 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n* 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n* 文本事件，当在文档中输入文本时触发，如：textInput\n* 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n* 合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n* 变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n同时DOM3级事件也允许使用者自定义一些事件。\n\n### IE事件处理程序\n> 支持IE事件处理程序的浏览器只有IE和Opera\n\n上文说到IE9以后才支持addEventListener和removeEventListener，IE9以前浏览器有类似的方法，attachEvent和detachEvent，但是这2个方法只接受2个参数，事件名称和事件处理程序函数。由于IE8及其之前的版本并不支持DOM事件流，只有事件冒泡，所以没有第三个参数也是意料之中的。\n那这个和DOM 0 级事件有什么区别呢？\nDOM 0 级事件处理函数中的this指代的是当前DOM元素，attachEvent中this指代的是window\n```js\nlet btn = document.getElementById(\"myBtn\")\nbtn.attachEventListener(\"onclick\",function(){\n  console.log(\"clicked\")\n})\nbtn.attachEventListener(\"onclick\",function(){\n  console.log(\"hello world\")\n})\n```\n顺序是先hello world 再clicked，这是和addEventListener不一样的地方。还有就是\"click\"&&\"onclick\"\n\n## 小结\n本文介绍了事件流和几种不同级别的DOM事件，不同浏览器的处理方式需要认真对待。\n\n","slug":"Js事件机制（上）","published":1,"updated":"2018-03-22T08:38:27.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos30000058qg3w26ipdh","content":"<p>很早就想好好总结一下事件机制了，终于有动力写了。文章分为上下2部分<br>JS和HTML的交互是通过事件来实现的。事件就是文档中发生的一些特定的交互瞬间。</p>\n<h2 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h2><blockquote>\n<p>当浏览器发展到第四代时（IE4 和  netscape Communicator 4）,开发团队遇到了一个有意思的问题：页面的哪一部分会拥有某个特定的事件，可以想象在一张纸上画一组同心圆，如果把手指放在圆心上，那么你的手指指向的不是一个圆，而是所有的圆。2家公司看待事件的想法是一致的。当你点击了一个按钮，他们都认为是点击不仅仅发生在按钮上。也就是说 当你点击按钮，你也点击了按钮的容器元素，甚至可以说点击了整个页面。<br><strong>事件流</strong>描述的是，页面接收事件的顺序。IE和Netscape开发团队居然提出了完全相反的事件流的概念。IE的事件流是事件冒泡流，netScape是事件捕获流。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7821791-664099d3b7629a47..jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><p>IE的事件流流叫事件冒泡（event bubbling）<br>所有的现代浏览器都是支持事件冒泡，但是具体实现上有一点区别。<br><em>IE5.5及其更早的版本会跳过html直接到document</em></p>\n<h4 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h4><p>netscape 团队提出的另一种事件流叫事件捕获。事件捕获的思想是不太具体的节点应该更早的接收到事件，具体的节点应该最后接受到事件。它的目的是在事件到达预定目标之前捕获它。</p>\n<h4 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h4><blockquote>\n<p>IE9、Opera、Firefox、Chrome、Safari都是支持DOM事件流的。<strong>IE8及更早的版本不支持</strong></p>\n</blockquote>\n<p>DOM 2级事件规定事件流包括3个阶段，事件捕获阶段、处于目标阶段、事件冒泡阶段。<br>首先发生的事件捕获，为截取事件提供了机会。然后是实际的目标接受事件，最后一个阶段是冒泡阶段。</p>\n<h2 id=\"DOM事件级别\"><a href=\"#DOM事件级别\" class=\"headerlink\" title=\"DOM事件级别\"></a>DOM事件级别</h2><p>Dom事件主要分为3个级别，DOM 0 级、DOM2级、DOM3级，但是还有一个HTML事件，直接内嵌在HTML里面的。</p>\n<h4 id=\"HTML事件\"><a href=\"#HTML事件\" class=\"headerlink\" title=\"HTML事件\"></a>HTML事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"handleClick()\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  function handleClick()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    console.log('do something')</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></span><br></pre></td></tr></table></figure>\n<p>这种强耦合的的事件方法存在2个弊端，首先是时差问题，用户可能在HTML元素一渲染在页面的时候就点击按钮，但是当时的事件处理程序组可能还没有执行条件，比如这个demo中handleClick是在页面的最底部定义的，如果用户在页面解析handleClick函数之前就点击了按钮，会引发错误。<br>其次这种强耦合也是不被提倡的。</p>\n<h4 id=\"DOM-0-级事件\"><a href=\"#DOM-0-级事件\" class=\"headerlink\" title=\"DOM 0 级事件\"></a>DOM 0 级事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span> = <span class=\"string\">‘myBtn’</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  var btn = document.getElementById('myBtn')</span></span><br><span class=\"line\"><span class=\"undefined\">  btn.onclick = function ()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    console.log('do something', this.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></span><br></pre></td></tr></table></figure>\n<p>DOM 0 级事件是将一个函数赋给一个dom对象的处理函数属性。<br>可以通过给事件处理属性赋值null来解绑事件。<br>这个demo中就是讲函数赋给了btn的onclick属性<br>通过以下的demo可以看出来，<strong>DOM 0 级事件的处理程序会在捕获阶段被处理。</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;width:300px;background-color:pink;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"reset\"</span>&gt;</span>还原<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            //IE8-浏览器返回div body html document</span></span><br><span class=\"line\"><span class=\"undefined\">            //其他浏览器返回div body html document window</span></span><br><span class=\"line\"><span class=\"undefined\">            reset.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                history.go();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            box.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'div\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.body.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'body\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.documentElement.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'html\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'document\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            window.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'window\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &lt;/script</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DOM-2-级事件\"><a href=\"#DOM-2-级事件\" class=\"headerlink\" title=\"DOM 2 级事件\"></a>DOM 2 级事件</h4><blockquote>\n<p>IE9、Firefix、Safari、Chrome、Opera支持DOM 2 级事件处理程序</p>\n</blockquote>\n<p>Dom 2 级事件定义了2个方法，用于指定和删除事件处理程序：addEventListener 和 removeEventListener。<br>他们都接受3个参数</p>\n<ul>\n<li>需要处理的事件名：click，scroll，focuse // <strong>注意没有 on，不是onclick</strong></li>\n<li>事件的处理函数： 可以是函数名字</li>\n<li>useCapture： true表示在捕获阶段调用处理程序，false表示冒泡阶段调用。<em>默认为false</em></li>\n</ul>\n<p>removeEventListener的事件处理程序函数必须与addEventListener的相同。匿名函数没办法移除<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventListener(<span class=\"string\">\"click\"</span>, handleClick, <span class=\"literal\">true</span>)</span><br><span class=\"line\">btn.removeEventListener(<span class=\"string\">\"click\"</span>, handleClick, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure></p>\n<p>大多数情况下，都是将是将事件处理程序添加到时间流的冒泡阶段，这样可以最大限度的兼容各种浏览器，但是也不排除有些场合需要在到达目标事件之前捕获它。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;width:300px;background-color:pink;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"reset\"</span>&gt;</span>还原<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//IE8-浏览器不支持</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//其他浏览器返回window document html body div</span></span></span><br><span class=\"line\"><span class=\"javascript\">            reset.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                history.go();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            box.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'div\\n'</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'body\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.documentElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'html\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'document\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'window\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DOM-3-级事件\"><a href=\"#DOM-3-级事件\" class=\"headerlink\" title=\"DOM 3 级事件\"></a>DOM 3 级事件</h4><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：</p>\n<ul>\n<li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li>\n<li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li>\n<li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</li>\n<li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li>\n<li>文本事件，当在文档中输入文本时触发，如：textInput</li>\n<li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li>\n<li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li>\n<li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified<br>同时DOM3级事件也允许使用者自定义一些事件。</li>\n</ul>\n<h3 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a>IE事件处理程序</h3><blockquote>\n<p>支持IE事件处理程序的浏览器只有IE和Opera</p>\n</blockquote>\n<p>上文说到IE9以后才支持addEventListener和removeEventListener，IE9以前浏览器有类似的方法，attachEvent和detachEvent，但是这2个方法只接受2个参数，事件名称和事件处理程序函数。由于IE8及其之前的版本并不支持DOM事件流，只有事件冒泡，所以没有第三个参数也是意料之中的。<br>那这个和DOM 0 级事件有什么区别呢？<br>DOM 0 级事件处理函数中的this指代的是当前DOM元素，attachEvent中this指代的是window<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBtn\"</span>)</span><br><span class=\"line\">btn.attachEventListener(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"clicked\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">btn.attachEventListener(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>顺序是先hello world 再clicked，这是和addEventListener不一样的地方。还有就是”click”&amp;&amp;”onclick”</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文介绍了事件流和几种不同级别的DOM事件，不同浏览器的处理方式需要认真对待。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早就想好好总结一下事件机制了，终于有动力写了。文章分为上下2部分<br>JS和HTML的交互是通过事件来实现的。事件就是文档中发生的一些特定的交互瞬间。</p>\n<h2 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h2><blockquote>\n<p>当浏览器发展到第四代时（IE4 和  netscape Communicator 4）,开发团队遇到了一个有意思的问题：页面的哪一部分会拥有某个特定的事件，可以想象在一张纸上画一组同心圆，如果把手指放在圆心上，那么你的手指指向的不是一个圆，而是所有的圆。2家公司看待事件的想法是一致的。当你点击了一个按钮，他们都认为是点击不仅仅发生在按钮上。也就是说 当你点击按钮，你也点击了按钮的容器元素，甚至可以说点击了整个页面。<br><strong>事件流</strong>描述的是，页面接收事件的顺序。IE和Netscape开发团队居然提出了完全相反的事件流的概念。IE的事件流是事件冒泡流，netScape是事件捕获流。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7821791-664099d3b7629a47..jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><p>IE的事件流流叫事件冒泡（event bubbling）<br>所有的现代浏览器都是支持事件冒泡，但是具体实现上有一点区别。<br><em>IE5.5及其更早的版本会跳过html直接到document</em></p>\n<h4 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h4><p>netscape 团队提出的另一种事件流叫事件捕获。事件捕获的思想是不太具体的节点应该更早的接收到事件，具体的节点应该最后接受到事件。它的目的是在事件到达预定目标之前捕获它。</p>\n<h4 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h4><blockquote>\n<p>IE9、Opera、Firefox、Chrome、Safari都是支持DOM事件流的。<strong>IE8及更早的版本不支持</strong></p>\n</blockquote>\n<p>DOM 2级事件规定事件流包括3个阶段，事件捕获阶段、处于目标阶段、事件冒泡阶段。<br>首先发生的事件捕获，为截取事件提供了机会。然后是实际的目标接受事件，最后一个阶段是冒泡阶段。</p>\n<h2 id=\"DOM事件级别\"><a href=\"#DOM事件级别\" class=\"headerlink\" title=\"DOM事件级别\"></a>DOM事件级别</h2><p>Dom事件主要分为3个级别，DOM 0 级、DOM2级、DOM3级，但是还有一个HTML事件，直接内嵌在HTML里面的。</p>\n<h4 id=\"HTML事件\"><a href=\"#HTML事件\" class=\"headerlink\" title=\"HTML事件\"></a>HTML事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"handleClick()\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  function handleClick()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    console.log('do something')</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></span><br></pre></td></tr></table></figure>\n<p>这种强耦合的的事件方法存在2个弊端，首先是时差问题，用户可能在HTML元素一渲染在页面的时候就点击按钮，但是当时的事件处理程序组可能还没有执行条件，比如这个demo中handleClick是在页面的最底部定义的，如果用户在页面解析handleClick函数之前就点击了按钮，会引发错误。<br>其次这种强耦合也是不被提倡的。</p>\n<h4 id=\"DOM-0-级事件\"><a href=\"#DOM-0-级事件\" class=\"headerlink\" title=\"DOM 0 级事件\"></a>DOM 0 级事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span> = <span class=\"string\">‘myBtn’</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  var btn = document.getElementById('myBtn')</span></span><br><span class=\"line\"><span class=\"undefined\">  btn.onclick = function ()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    console.log('do something', this.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span></span><br></pre></td></tr></table></figure>\n<p>DOM 0 级事件是将一个函数赋给一个dom对象的处理函数属性。<br>可以通过给事件处理属性赋值null来解绑事件。<br>这个demo中就是讲函数赋给了btn的onclick属性<br>通过以下的demo可以看出来，<strong>DOM 0 级事件的处理程序会在捕获阶段被处理。</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;width:300px;background-color:pink;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"reset\"</span>&gt;</span>还原<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            //IE8-浏览器返回div body html document</span></span><br><span class=\"line\"><span class=\"undefined\">            //其他浏览器返回div body html document window</span></span><br><span class=\"line\"><span class=\"undefined\">            reset.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                history.go();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            box.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'div\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.body.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'body\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.documentElement.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'html\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            document.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'document\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            window.onclick = function () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                box.innerHTML += 'window\\n';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &lt;/script</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DOM-2-级事件\"><a href=\"#DOM-2-级事件\" class=\"headerlink\" title=\"DOM 2 级事件\"></a>DOM 2 级事件</h4><blockquote>\n<p>IE9、Firefix、Safari、Chrome、Opera支持DOM 2 级事件处理程序</p>\n</blockquote>\n<p>Dom 2 级事件定义了2个方法，用于指定和删除事件处理程序：addEventListener 和 removeEventListener。<br>他们都接受3个参数</p>\n<ul>\n<li>需要处理的事件名：click，scroll，focuse // <strong>注意没有 on，不是onclick</strong></li>\n<li>事件的处理函数： 可以是函数名字</li>\n<li>useCapture： true表示在捕获阶段调用处理程序，false表示冒泡阶段调用。<em>默认为false</em></li>\n</ul>\n<p>removeEventListener的事件处理程序函数必须与addEventListener的相同。匿名函数没办法移除<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.addEventListener(<span class=\"string\">\"click\"</span>, handleClick, <span class=\"literal\">true</span>)</span><br><span class=\"line\">btn.removeEventListener(<span class=\"string\">\"click\"</span>, handleClick, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure></p>\n<p>大多数情况下，都是将是将事件处理程序添加到时间流的冒泡阶段，这样可以最大限度的兼容各种浏览器，但是也不排除有些场合需要在到达目标事件之前捕获它。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;width:300px;background-color:pink;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"reset\"</span>&gt;</span>还原<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//IE8-浏览器不支持</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//其他浏览器返回window document html body div</span></span></span><br><span class=\"line\"><span class=\"javascript\">            reset.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                history.go();</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            box.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'div\\n'</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'body\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.documentElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'html\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'document\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                box.innerHTML += <span class=\"string\">'window\\n'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DOM-3-级事件\"><a href=\"#DOM-3-级事件\" class=\"headerlink\" title=\"DOM 3 级事件\"></a>DOM 3 级事件</h4><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：</p>\n<ul>\n<li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li>\n<li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li>\n<li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</li>\n<li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li>\n<li>文本事件，当在文档中输入文本时触发，如：textInput</li>\n<li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li>\n<li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li>\n<li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified<br>同时DOM3级事件也允许使用者自定义一些事件。</li>\n</ul>\n<h3 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a>IE事件处理程序</h3><blockquote>\n<p>支持IE事件处理程序的浏览器只有IE和Opera</p>\n</blockquote>\n<p>上文说到IE9以后才支持addEventListener和removeEventListener，IE9以前浏览器有类似的方法，attachEvent和detachEvent，但是这2个方法只接受2个参数，事件名称和事件处理程序函数。由于IE8及其之前的版本并不支持DOM事件流，只有事件冒泡，所以没有第三个参数也是意料之中的。<br>那这个和DOM 0 级事件有什么区别呢？<br>DOM 0 级事件处理函数中的this指代的是当前DOM元素，attachEvent中this指代的是window<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBtn\"</span>)</span><br><span class=\"line\">btn.attachEventListener(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"clicked\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">btn.attachEventListener(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>顺序是先hello world 再clicked，这是和addEventListener不一样的地方。还有就是”click”&amp;&amp;”onclick”</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文介绍了事件流和几种不同级别的DOM事件，不同浏览器的处理方式需要认真对待。</p>\n"},{"title":"Js事件机制（下）","date":"2018-03-14T07:13:12.000Z","_content":"上文介绍了事件流和事件类型，本文介绍事件对象和事件代理\n## 事件对象\n> 在触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包括所有与事件有关的信息。\n\n#### DOM中的事件对象\n兼容DOM的浏览器将一个event对象传入到事件处理程序中。无论指定的事件使用什么方法，DOM 0 级和 DOM 2级，都会传入event对象\n```html\n<input onclick=\"alert(event.type)\"/>\n<input onclick = \"handleClick(event)\"/>\n<script>\n  //HTML事件，html中参数必须为event\n  function handleClick(e){\n    console.log(e.type)\n  }\n  let btn = document.getElementById(\"myBtn\")\n  // DOM 0 级事件\n  btn.onclick = function(e){\n  console.log(e.type)\n  }\n  btn.addEventListener(\"click\", function(e){\n    console.log(e.type)\n  },false)\n</script>\n```\n\nHTML原生事件，DOM 0 级事件，DOM 2 级事件都可以获取到event对象。\nEvent对象成员\n\n|属性/方法| 类型 | 读/写 | 说明 |\n| :-: | :-: | :-: |  :-: |\n| bubbles | Boolean| 只读 | 表明事件是否冒泡|\n|cancelable| boolean | 只读 |  表明是否可以取消事件的默认行为|\n|currentTarget | Element | 只读 | 表明事件处理程序当前处理的那个程序|\n|defaultPrevented | boolean | 只读 | 为true表示事件已经调用过preventDefault|\n|details | Interger | 只读 | 与事件相关的细节信息|\n|eventPhrase| Interger | 只读 |调用事件处理程序的阶段，1表示捕获，2表示目标阶段，3表示冒泡|\n|preventDefault()| Function | 只读 | 取消事件的默认行为|\n|stopImmediatePropagation() | Function | 只读| 取消事件的进一步冒泡，同时阻止任何事件处理程序被调用|\n|stopPropagation() | Function| 只读 | 取消事件的进一步冒泡|\n|target | Element|  只读 | 事件的目标DOM|\n|trusted | Boolean | 只读| true表示是浏览器生成的|\n|type | String| 只读 | 被触发的事件类型|\n|view | AbstractView | 只读 | 与事件关联的抽象视图|\n\n**只有在事件处理程序执行期间，event对象才会存在， 执行完会销毁**\n\n#### IE中的事件对象\n在使用DOM 0 级方法添加事件处理函数时，event对象作为window对象的一个属性存在。\n```js\n btn.onclick = function(){\n  var event = window.event;\n  console.log(event.type) //\"click\"\n}\n```\n如果用atttchEvent添加的，那么就会有一个event对象作为参数传入事件处理函数中\n```js\n  btn.attachEvent(\"onclick\", function(event){\n    console.log(event.type)\n  })\n```\nIE的event对象同样也包含于创建他的事件相关的属性和方法。\n\n|属性/方法| 类型 | 读/写 | 说明 |\n| :-: | :-: | :-: |  :-: |\n| cancelBubble | Boolean| 读/写 | default value 为 false，当设置为true时等同于DOM中的stopPropagation()|\n|returnValue| boolean | 读/写 | default value 为 true，当设置为false时等同于DOM中的preventDefault|\n|srcElement | Element | 只读 | 与DOM事件中的target相同|\n|type | boolean | 只读 | 被触发的事件类型|\n\n#### 跨浏览器的事件对象\n虽然DOM和IE的event对象不同，但是基于他们之间的相似性依然可以拿出跨浏览器的方案来。\n```js\nlet eventUtil = {\n  addHandler: function(element,type,handler) {\n    if (element.addEventListener) {\n      element.addEventListener(type,handler,false)\n    } else if(event.attachEvent) {\n      element.attachEvent(\"on\" + type, handler)\n    } else {\n      element[\"on\" + type] = handler\n    }\n  },\n  getEvent: function (event) {\n     return event || window.event\n  },\n  getTarget: function (event) {\n    return event.target || event.srcElement\n  },\n  stopProparation: function (event) {\n    if(event.stopPropagation) {\n      event.stopPropagation()\n    } else {\n      event.cancelBubble = true\n    }\n  },\n  preventDefault: function (event) {\n    if (event.preventDefault)\n    {\n      event.preventDefault()\n    } else {\n      event.returnValue = false\n    }\n  },\n  removeHandle: function (event) {\n    if (element.removeEventListener) {\n      element.removeEventListener(type,handler,false)\n    } else if(event.detachEvent) {\n      element.detachEvent(\"on\" + type, handler)\n    } else {\n      element[\"on\" + type] = null\n    }\n  }\n}\n```\n#### 事件代理\n通过之前的学习，我们知道事件处理程序让HTML与JS交互提供了可能。但是每次给DOM元素添加一个事件函数，那么就会在内存中加入一个对象，对象越多，性能也会有很大的影响。其次必须首先指定所有事件处理程序，这个过程需要很多的DOM访问，会影响整个页面的交互就绪时间。\n举个例子。\n```html\n<ul id = \"ul\">\n  <li id = \"li1\">1</li>\n  <li id = \"li2\">2</li>\n  <li id = \"li3\">3</li>\n  .....\n<ul>\n<script>\n  let li1 = document.getElementById('li1')\n  let li2 = document.getElementById('li2')\n  let li3 = document.getElementById('li3')\n  eventUtil.addHandler(li1,\"click\", function(event){\n    console.log(event.target)\n  })\n  eventUtil.addHandler(li2,\"click\", function(event){\n    console.log(event.target.id)\n  })\n  eventUtil.addHandler(li3,\"click\", function(event){\n    console.log(event.target.id)\n  })\n</script>\n```\n这种方式无疑很粗暴的，如果有成百上千个li，必然需要很大的代码量，就算采用的遍历的方式，代码量会少，但是遍历和过多的直接操作DOM也是不可取的。\n这个时候需要引入事件代理。\n\n**事件代理（有些人会叫事件委托）：只需要在DOM树中尽量最高的层次添加一个事件处理程序，利用事件冒泡的原理，子元素的事件也可以捕获到**\n\n还是上面的例子，用事件代理的方式实现\n```js\nlet ul = document.getElementById(\"ul\")\neventUtil.addHandler(ul, \"click\",function(event){\n  event = eventUtil.getEvent(event)\n  let target = eventUtil.getTarget(event)\n  switch (target.id) {\n    case \"li1\":\n      console.log(target.id)\n      break\n    case \"li2\":\n      console.log(target.id)\n      break\n    case \"li3\":\n      console.log(target.id)\n      break \n  }\n})\n```\n最适合采用事件委托的事件包括click,mousedown,mouseup,keydown,keyup和keypress。\n\n**事件代理的本质还是利用了事件冒泡**\n\n\n\n","source":"_posts/Js事件机制（下）.md","raw":"---\ntitle: Js事件机制（下）\ndate: 2018-03-14 15:13:12\ntags: Javascript事件\ncategory: JavaScript\n---\n上文介绍了事件流和事件类型，本文介绍事件对象和事件代理\n## 事件对象\n> 在触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包括所有与事件有关的信息。\n\n#### DOM中的事件对象\n兼容DOM的浏览器将一个event对象传入到事件处理程序中。无论指定的事件使用什么方法，DOM 0 级和 DOM 2级，都会传入event对象\n```html\n<input onclick=\"alert(event.type)\"/>\n<input onclick = \"handleClick(event)\"/>\n<script>\n  //HTML事件，html中参数必须为event\n  function handleClick(e){\n    console.log(e.type)\n  }\n  let btn = document.getElementById(\"myBtn\")\n  // DOM 0 级事件\n  btn.onclick = function(e){\n  console.log(e.type)\n  }\n  btn.addEventListener(\"click\", function(e){\n    console.log(e.type)\n  },false)\n</script>\n```\n\nHTML原生事件，DOM 0 级事件，DOM 2 级事件都可以获取到event对象。\nEvent对象成员\n\n|属性/方法| 类型 | 读/写 | 说明 |\n| :-: | :-: | :-: |  :-: |\n| bubbles | Boolean| 只读 | 表明事件是否冒泡|\n|cancelable| boolean | 只读 |  表明是否可以取消事件的默认行为|\n|currentTarget | Element | 只读 | 表明事件处理程序当前处理的那个程序|\n|defaultPrevented | boolean | 只读 | 为true表示事件已经调用过preventDefault|\n|details | Interger | 只读 | 与事件相关的细节信息|\n|eventPhrase| Interger | 只读 |调用事件处理程序的阶段，1表示捕获，2表示目标阶段，3表示冒泡|\n|preventDefault()| Function | 只读 | 取消事件的默认行为|\n|stopImmediatePropagation() | Function | 只读| 取消事件的进一步冒泡，同时阻止任何事件处理程序被调用|\n|stopPropagation() | Function| 只读 | 取消事件的进一步冒泡|\n|target | Element|  只读 | 事件的目标DOM|\n|trusted | Boolean | 只读| true表示是浏览器生成的|\n|type | String| 只读 | 被触发的事件类型|\n|view | AbstractView | 只读 | 与事件关联的抽象视图|\n\n**只有在事件处理程序执行期间，event对象才会存在， 执行完会销毁**\n\n#### IE中的事件对象\n在使用DOM 0 级方法添加事件处理函数时，event对象作为window对象的一个属性存在。\n```js\n btn.onclick = function(){\n  var event = window.event;\n  console.log(event.type) //\"click\"\n}\n```\n如果用atttchEvent添加的，那么就会有一个event对象作为参数传入事件处理函数中\n```js\n  btn.attachEvent(\"onclick\", function(event){\n    console.log(event.type)\n  })\n```\nIE的event对象同样也包含于创建他的事件相关的属性和方法。\n\n|属性/方法| 类型 | 读/写 | 说明 |\n| :-: | :-: | :-: |  :-: |\n| cancelBubble | Boolean| 读/写 | default value 为 false，当设置为true时等同于DOM中的stopPropagation()|\n|returnValue| boolean | 读/写 | default value 为 true，当设置为false时等同于DOM中的preventDefault|\n|srcElement | Element | 只读 | 与DOM事件中的target相同|\n|type | boolean | 只读 | 被触发的事件类型|\n\n#### 跨浏览器的事件对象\n虽然DOM和IE的event对象不同，但是基于他们之间的相似性依然可以拿出跨浏览器的方案来。\n```js\nlet eventUtil = {\n  addHandler: function(element,type,handler) {\n    if (element.addEventListener) {\n      element.addEventListener(type,handler,false)\n    } else if(event.attachEvent) {\n      element.attachEvent(\"on\" + type, handler)\n    } else {\n      element[\"on\" + type] = handler\n    }\n  },\n  getEvent: function (event) {\n     return event || window.event\n  },\n  getTarget: function (event) {\n    return event.target || event.srcElement\n  },\n  stopProparation: function (event) {\n    if(event.stopPropagation) {\n      event.stopPropagation()\n    } else {\n      event.cancelBubble = true\n    }\n  },\n  preventDefault: function (event) {\n    if (event.preventDefault)\n    {\n      event.preventDefault()\n    } else {\n      event.returnValue = false\n    }\n  },\n  removeHandle: function (event) {\n    if (element.removeEventListener) {\n      element.removeEventListener(type,handler,false)\n    } else if(event.detachEvent) {\n      element.detachEvent(\"on\" + type, handler)\n    } else {\n      element[\"on\" + type] = null\n    }\n  }\n}\n```\n#### 事件代理\n通过之前的学习，我们知道事件处理程序让HTML与JS交互提供了可能。但是每次给DOM元素添加一个事件函数，那么就会在内存中加入一个对象，对象越多，性能也会有很大的影响。其次必须首先指定所有事件处理程序，这个过程需要很多的DOM访问，会影响整个页面的交互就绪时间。\n举个例子。\n```html\n<ul id = \"ul\">\n  <li id = \"li1\">1</li>\n  <li id = \"li2\">2</li>\n  <li id = \"li3\">3</li>\n  .....\n<ul>\n<script>\n  let li1 = document.getElementById('li1')\n  let li2 = document.getElementById('li2')\n  let li3 = document.getElementById('li3')\n  eventUtil.addHandler(li1,\"click\", function(event){\n    console.log(event.target)\n  })\n  eventUtil.addHandler(li2,\"click\", function(event){\n    console.log(event.target.id)\n  })\n  eventUtil.addHandler(li3,\"click\", function(event){\n    console.log(event.target.id)\n  })\n</script>\n```\n这种方式无疑很粗暴的，如果有成百上千个li，必然需要很大的代码量，就算采用的遍历的方式，代码量会少，但是遍历和过多的直接操作DOM也是不可取的。\n这个时候需要引入事件代理。\n\n**事件代理（有些人会叫事件委托）：只需要在DOM树中尽量最高的层次添加一个事件处理程序，利用事件冒泡的原理，子元素的事件也可以捕获到**\n\n还是上面的例子，用事件代理的方式实现\n```js\nlet ul = document.getElementById(\"ul\")\neventUtil.addHandler(ul, \"click\",function(event){\n  event = eventUtil.getEvent(event)\n  let target = eventUtil.getTarget(event)\n  switch (target.id) {\n    case \"li1\":\n      console.log(target.id)\n      break\n    case \"li2\":\n      console.log(target.id)\n      break\n    case \"li3\":\n      console.log(target.id)\n      break \n  }\n})\n```\n最适合采用事件委托的事件包括click,mousedown,mouseup,keydown,keyup和keypress。\n\n**事件代理的本质还是利用了事件冒泡**\n\n\n\n","slug":"Js事件机制（下）","published":1,"updated":"2018-03-16T05:40:21.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4d000558qgs93agd9b","content":"<p>上文介绍了事件流和事件类型，本文介绍事件对象和事件代理</p>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><blockquote>\n<p>在触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包括所有与事件有关的信息。</p>\n</blockquote>\n<h4 id=\"DOM中的事件对象\"><a href=\"#DOM中的事件对象\" class=\"headerlink\" title=\"DOM中的事件对象\"></a>DOM中的事件对象</h4><p>兼容DOM的浏览器将一个event对象传入到事件处理程序中。无论指定的事件使用什么方法，DOM 0 级和 DOM 2级，都会传入event对象<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert(event.type)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"handleClick(event)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//HTML事件，html中参数必须为event</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBtn\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// DOM 0 级事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">  btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  btn.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,<span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>HTML原生事件，DOM 0 级事件，DOM 2 级事件都可以获取到event对象。<br>Event对象成员</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/方法</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">读/写</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">bubbles</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明事件是否冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cancelable</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明是否可以取消事件的默认行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">currentTarget</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明事件处理程序当前处理的那个程序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">defaultPrevented</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">为true表示事件已经调用过preventDefault</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">details</td>\n<td style=\"text-align:center\">Interger</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与事件相关的细节信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eventPhrase</td>\n<td style=\"text-align:center\">Interger</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">调用事件处理程序的阶段，1表示捕获，2表示目标阶段，3表示冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preventDefault()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的默认行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stopImmediatePropagation()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的进一步冒泡，同时阻止任何事件处理程序被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stopPropagation()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的进一步冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">target</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">事件的目标DOM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trusted</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">true表示是浏览器生成的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">被触发的事件类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">view</td>\n<td style=\"text-align:center\">AbstractView</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与事件关联的抽象视图</td>\n</tr>\n</tbody>\n</table>\n<p><strong>只有在事件处理程序执行期间，event对象才会存在， 执行完会销毁</strong></p>\n<h4 id=\"IE中的事件对象\"><a href=\"#IE中的事件对象\" class=\"headerlink\" title=\"IE中的事件对象\"></a>IE中的事件对象</h4><p>在使用DOM 0 级方法添加事件处理函数时，event对象作为window对象的一个属性存在。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type) <span class=\"comment\">//\"click\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果用atttchEvent添加的，那么就会有一个event对象作为参数传入事件处理函数中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">\"onclick\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>IE的event对象同样也包含于创建他的事件相关的属性和方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/方法</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">读/写</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cancelBubble</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">读/写</td>\n<td style=\"text-align:center\">default value 为 false，当设置为true时等同于DOM中的stopPropagation()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">returnValue</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">读/写</td>\n<td style=\"text-align:center\">default value 为 true，当设置为false时等同于DOM中的preventDefault</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">srcElement</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与DOM事件中的target相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">被触发的事件类型</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"跨浏览器的事件对象\"><a href=\"#跨浏览器的事件对象\" class=\"headerlink\" title=\"跨浏览器的事件对象\"></a>跨浏览器的事件对象</h4><p>虽然DOM和IE的event对象不同，但是基于他们之间的相似性依然可以拿出跨浏览器的方案来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventUtil = &#123;</span><br><span class=\"line\">  addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,type,handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">      element.addEventListener(type,handler,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(event.attachEvent) &#123;</span><br><span class=\"line\">      element.attachEvent(<span class=\"string\">\"on\"</span> + type, handler)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      element[<span class=\"string\">\"on\"</span> + type] = handler</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> event || <span class=\"built_in\">window</span>.event</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> event.target || event.srcElement</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  stopProparation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.stopPropagation) &#123;</span><br><span class=\"line\">      event.stopPropagation()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      event.cancelBubble = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.preventDefault)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      event.preventDefault()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      event.returnValue = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeHandle: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">      element.removeEventListener(type,handler,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(event.detachEvent) &#123;</span><br><span class=\"line\">      element.detachEvent(<span class=\"string\">\"on\"</span> + type, handler)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h4><p>通过之前的学习，我们知道事件处理程序让HTML与JS交互提供了可能。但是每次给DOM元素添加一个事件函数，那么就会在内存中加入一个对象，对象越多，性能也会有很大的影响。其次必须首先指定所有事件处理程序，这个过程需要很多的DOM访问，会影响整个页面的交互就绪时间。<br>举个例子。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span> = <span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  .....</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li1'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li2'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li3'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li1,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li2,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li3,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式无疑很粗暴的，如果有成百上千个li，必然需要很大的代码量，就算采用的遍历的方式，代码量会少，但是遍历和过多的直接操作DOM也是不可取的。<br>这个时候需要引入事件代理。</p>\n<p><strong>事件代理（有些人会叫事件委托）：只需要在DOM树中尽量最高的层次添加一个事件处理程序，利用事件冒泡的原理，子元素的事件也可以捕获到</strong></p>\n<p>还是上面的例子，用事件代理的方式实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ul\"</span>)</span><br><span class=\"line\">eventUtil.addHandler(ul, <span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  event = eventUtil.getEvent(event)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = eventUtil.getTarget(event)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li1\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li2\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li3\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>最适合采用事件委托的事件包括click,mousedown,mouseup,keydown,keyup和keypress。</p>\n<p><strong>事件代理的本质还是利用了事件冒泡</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上文介绍了事件流和事件类型，本文介绍事件对象和事件代理</p>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><blockquote>\n<p>在触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包括所有与事件有关的信息。</p>\n</blockquote>\n<h4 id=\"DOM中的事件对象\"><a href=\"#DOM中的事件对象\" class=\"headerlink\" title=\"DOM中的事件对象\"></a>DOM中的事件对象</h4><p>兼容DOM的浏览器将一个event对象传入到事件处理程序中。无论指定的事件使用什么方法，DOM 0 级和 DOM 2级，都会传入event对象<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alert(event.type)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"handleClick(event)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//HTML事件，html中参数必须为event</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myBtn\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// DOM 0 级事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">  btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  btn.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(e.type)</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,<span class=\"literal\">false</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>HTML原生事件，DOM 0 级事件，DOM 2 级事件都可以获取到event对象。<br>Event对象成员</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/方法</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">读/写</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">bubbles</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明事件是否冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cancelable</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明是否可以取消事件的默认行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">currentTarget</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">表明事件处理程序当前处理的那个程序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">defaultPrevented</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">为true表示事件已经调用过preventDefault</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">details</td>\n<td style=\"text-align:center\">Interger</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与事件相关的细节信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eventPhrase</td>\n<td style=\"text-align:center\">Interger</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">调用事件处理程序的阶段，1表示捕获，2表示目标阶段，3表示冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preventDefault()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的默认行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stopImmediatePropagation()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的进一步冒泡，同时阻止任何事件处理程序被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stopPropagation()</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">取消事件的进一步冒泡</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">target</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">事件的目标DOM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trusted</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">true表示是浏览器生成的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">被触发的事件类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">view</td>\n<td style=\"text-align:center\">AbstractView</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与事件关联的抽象视图</td>\n</tr>\n</tbody>\n</table>\n<p><strong>只有在事件处理程序执行期间，event对象才会存在， 执行完会销毁</strong></p>\n<h4 id=\"IE中的事件对象\"><a href=\"#IE中的事件对象\" class=\"headerlink\" title=\"IE中的事件对象\"></a>IE中的事件对象</h4><p>在使用DOM 0 级方法添加事件处理函数时，event对象作为window对象的一个属性存在。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type) <span class=\"comment\">//\"click\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果用atttchEvent添加的，那么就会有一个event对象作为参数传入事件处理函数中<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.attachEvent(<span class=\"string\">\"onclick\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>IE的event对象同样也包含于创建他的事件相关的属性和方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/方法</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">读/写</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cancelBubble</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">读/写</td>\n<td style=\"text-align:center\">default value 为 false，当设置为true时等同于DOM中的stopPropagation()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">returnValue</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">读/写</td>\n<td style=\"text-align:center\">default value 为 true，当设置为false时等同于DOM中的preventDefault</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">srcElement</td>\n<td style=\"text-align:center\">Element</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">与DOM事件中的target相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只读</td>\n<td style=\"text-align:center\">被触发的事件类型</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"跨浏览器的事件对象\"><a href=\"#跨浏览器的事件对象\" class=\"headerlink\" title=\"跨浏览器的事件对象\"></a>跨浏览器的事件对象</h4><p>虽然DOM和IE的event对象不同，但是基于他们之间的相似性依然可以拿出跨浏览器的方案来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventUtil = &#123;</span><br><span class=\"line\">  addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,type,handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">      element.addEventListener(type,handler,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(event.attachEvent) &#123;</span><br><span class=\"line\">      element.attachEvent(<span class=\"string\">\"on\"</span> + type, handler)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      element[<span class=\"string\">\"on\"</span> + type] = handler</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> event || <span class=\"built_in\">window</span>.event</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> event.target || event.srcElement</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  stopProparation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(event.stopPropagation) &#123;</span><br><span class=\"line\">      event.stopPropagation()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      event.cancelBubble = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.preventDefault)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      event.preventDefault()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      event.returnValue = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  removeHandle: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</span><br><span class=\"line\">      element.removeEventListener(type,handler,<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(event.detachEvent) &#123;</span><br><span class=\"line\">      element.detachEvent(<span class=\"string\">\"on\"</span> + type, handler)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h4><p>通过之前的学习，我们知道事件处理程序让HTML与JS交互提供了可能。但是每次给DOM元素添加一个事件函数，那么就会在内存中加入一个对象，对象越多，性能也会有很大的影响。其次必须首先指定所有事件处理程序，这个过程需要很多的DOM访问，会影响整个页面的交互就绪时间。<br>举个例子。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span> = <span class=\"string\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span> = <span class=\"string\">\"li3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  .....</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li1'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li2'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> li3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'li3'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li1,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li2,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  eventUtil.addHandler(li3,<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(event.target.id)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这种方式无疑很粗暴的，如果有成百上千个li，必然需要很大的代码量，就算采用的遍历的方式，代码量会少，但是遍历和过多的直接操作DOM也是不可取的。<br>这个时候需要引入事件代理。</p>\n<p><strong>事件代理（有些人会叫事件委托）：只需要在DOM树中尽量最高的层次添加一个事件处理程序，利用事件冒泡的原理，子元素的事件也可以捕获到</strong></p>\n<p>还是上面的例子，用事件代理的方式实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ul\"</span>)</span><br><span class=\"line\">eventUtil.addHandler(ul, <span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  event = eventUtil.getEvent(event)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = eventUtil.getTarget(event)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (target.id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li1\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li2\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"li3\"</span>:</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.id)</span><br><span class=\"line\">      <span class=\"keyword\">break</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>最适合采用事件委托的事件包括click,mousedown,mouseup,keydown,keyup和keypress。</p>\n<p><strong>事件代理的本质还是利用了事件冒泡</strong></p>\n"},{"title":"css之圣杯布局","date":"2018-03-21T03:08:15.000Z","_content":"## 概述\ncss一只是我很薄弱的一个点，也一直不够重视。最近写一个页面的时候，常见的圣杯布局就写得很难受，所以就趁机好好学习一把。哈哈\n\n## flex\n阮一峰老师写的很全面了，浅显易懂。从自己的角度理解一下\n\n<a href = \"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">flex布局——语法篇</a>\n\n<a href = \"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\">flex布局——实例篇</a>\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n#### 容器（container）的属性\n\n任何容器都可以指定为flex布局\n```css\n.box {\n    display: flex\n}\n```\n容器一共有以下6个属性,第一个为默认值\n```css\n.box {\n    // 项目的排列方向\n    flex-direction: row | row-reverse | column | column-reverse;\n\n    // 换行方式\n    flex-wrap: nowrap | wrap | wrap-reverse;\n\n    // flex-direction 和 flex-wrap的简写，默认为 row nowrap\n    flex-flow: <flex-direction> || <flex-wrap>;\n\n    // justify-content属性定义了项目在主轴上的对齐方式\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n\n    // align-items属性定义项目在交叉轴上如何对齐。\n    align-items: flex-start | flex-end | center | baseline | stretch;\n\n    // align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch\n}\n\n```\n#### 项目的属性\n\n项目属性同样也有6个\n```css\n.item {\n    // order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n    order: <integer>;\n\n    // flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n    flex-grow: <number>; /* default 0 */\n\n    // flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n    flex-shrink:  <number>; /* default 1 */\n\n    //  flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n     flex-basis: <length> | auto; /* default auto */\n\n    // 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\n  //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n#### 相对定位实现\n\n直接看demo啦\n```html\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n```\n\n通过-margin和相对定位实现\n\n```css\n     .container {\n        padding: 0 200px 0 150px;\n        height: 100vh;\n        background-color: green\n    }\n\n    .main {\n        width: 100%;\n        background-color: red;\n        float: left\n    }\n\n    .left {\n        margin-left: -100%;\n        position: relative;\n        right: 150px;\n        width: 150px;\n        background-color: blue;\n        float: left\n    }\n\n    .right {\n        position: relative;\n        margin-left: -200px;\n        left:200px;\n        width: 200px;\n        float: left;        \n        background-color: pink\n    }\n```\n\n#### 双飞翼布局\n圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决 “中间栏div内容不被遮挡”问题的思路不一样。 \n\nhtml结构有所改变\n```html\n    <div class=\"container\">\n        <div class=\"main\">\n            <div class=\"content\">main</div> \n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n```\n\n```css\n    .container {\n        height: 100vh;\n        text-align: center;\n        background-color: green\n    }\n\n    .main {\n        width: 100%;\n        height: 100%;\n        background-color: red;\n        float: left\n    }\n\n    .left {\n        margin-left: -100%;\n        height: 100%;\n        width: 150px;\n        background-color: blue;\n        float: left\n    }\n\n    .right {\n        margin-left: -200px;\n        height: 100%;\n        width: 200px;\n        float: left;        \n        background-color: pink\n    }\n```\ncss简单了，不需要相对定位了\n\n\n#### flex实现\n```css\n    .container {\n        height: 100vh;\n        display: flex;\n        background-color: green\n    }\n\n    .main {\n        flex: 1;\n        height: 90vh;\n        background-color: red;\n    }\n\n    .left {\n        order: -1;\n        flex: 0 0 20%;\n        height: 90vh;\n        background-color: blue;\n    }\n\n    .right {\n        flex: 0 0 15%;\n        height: 90vh;\n        background-color: pink\n    }\n\n```\n\n个人最喜欢的实现方式\n\n#### 小节\n\n圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。多了1个div，少用大致4个css属性（圣杯布局中间divpadding-left和padding-right这2个属性）。\n\n\n","source":"_posts/css之圣杯布局.md","raw":"---\ntitle: css之圣杯布局\ndate: 2018-03-21 11:08:15\ntags: 页面布局\ncategory: CSS\n---\n## 概述\ncss一只是我很薄弱的一个点，也一直不够重视。最近写一个页面的时候，常见的圣杯布局就写得很难受，所以就趁机好好学习一把。哈哈\n\n## flex\n阮一峰老师写的很全面了，浅显易懂。从自己的角度理解一下\n\n<a href = \"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">flex布局——语法篇</a>\n\n<a href = \"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\">flex布局——实例篇</a>\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n#### 容器（container）的属性\n\n任何容器都可以指定为flex布局\n```css\n.box {\n    display: flex\n}\n```\n容器一共有以下6个属性,第一个为默认值\n```css\n.box {\n    // 项目的排列方向\n    flex-direction: row | row-reverse | column | column-reverse;\n\n    // 换行方式\n    flex-wrap: nowrap | wrap | wrap-reverse;\n\n    // flex-direction 和 flex-wrap的简写，默认为 row nowrap\n    flex-flow: <flex-direction> || <flex-wrap>;\n\n    // justify-content属性定义了项目在主轴上的对齐方式\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n\n    // align-items属性定义项目在交叉轴上如何对齐。\n    align-items: flex-start | flex-end | center | baseline | stretch;\n\n    // align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch\n}\n\n```\n#### 项目的属性\n\n项目属性同样也有6个\n```css\n.item {\n    // order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n    order: <integer>;\n\n    // flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n    flex-grow: <number>; /* default 0 */\n\n    // flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n    flex-shrink:  <number>; /* default 1 */\n\n    //  flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n     flex-basis: <length> | auto; /* default auto */\n\n    // 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\n  //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n#### 相对定位实现\n\n直接看demo啦\n```html\n    <div class=\"container\">\n        <div class=\"main\">main</div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n```\n\n通过-margin和相对定位实现\n\n```css\n     .container {\n        padding: 0 200px 0 150px;\n        height: 100vh;\n        background-color: green\n    }\n\n    .main {\n        width: 100%;\n        background-color: red;\n        float: left\n    }\n\n    .left {\n        margin-left: -100%;\n        position: relative;\n        right: 150px;\n        width: 150px;\n        background-color: blue;\n        float: left\n    }\n\n    .right {\n        position: relative;\n        margin-left: -200px;\n        left:200px;\n        width: 200px;\n        float: left;        \n        background-color: pink\n    }\n```\n\n#### 双飞翼布局\n圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决 “中间栏div内容不被遮挡”问题的思路不一样。 \n\nhtml结构有所改变\n```html\n    <div class=\"container\">\n        <div class=\"main\">\n            <div class=\"content\">main</div> \n        </div>\n        <div class=\"left\">left</div>\n        <div class=\"right\">right</div>\n    </div>\n```\n\n```css\n    .container {\n        height: 100vh;\n        text-align: center;\n        background-color: green\n    }\n\n    .main {\n        width: 100%;\n        height: 100%;\n        background-color: red;\n        float: left\n    }\n\n    .left {\n        margin-left: -100%;\n        height: 100%;\n        width: 150px;\n        background-color: blue;\n        float: left\n    }\n\n    .right {\n        margin-left: -200px;\n        height: 100%;\n        width: 200px;\n        float: left;        \n        background-color: pink\n    }\n```\ncss简单了，不需要相对定位了\n\n\n#### flex实现\n```css\n    .container {\n        height: 100vh;\n        display: flex;\n        background-color: green\n    }\n\n    .main {\n        flex: 1;\n        height: 90vh;\n        background-color: red;\n    }\n\n    .left {\n        order: -1;\n        flex: 0 0 20%;\n        height: 90vh;\n        background-color: blue;\n    }\n\n    .right {\n        flex: 0 0 15%;\n        height: 90vh;\n        background-color: pink\n    }\n\n```\n\n个人最喜欢的实现方式\n\n#### 小节\n\n圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。多了1个div，少用大致4个css属性（圣杯布局中间divpadding-left和padding-right这2个属性）。\n\n\n","slug":"css之圣杯布局","published":1,"updated":"2018-03-22T10:29:57.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4i000758qge262py5m","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>css一只是我很薄弱的一个点，也一直不够重视。最近写一个页面的时候，常见的圣杯布局就写得很难受，所以就趁机好好学习一把。哈哈</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>阮一峰老师写的很全面了，浅显易懂。从自己的角度理解一下</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">flex布局——语法篇</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex布局——实例篇</a></p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<h4 id=\"容器（container）的属性\"><a href=\"#容器（container）的属性\" class=\"headerlink\" title=\"容器（container）的属性\"></a>容器（container）的属性</h4><p>任何容器都可以指定为flex布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>容器一共有以下6个属性,第一个为默认值<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    // 项目的排列方向</span><br><span class=\"line\">    flex-direction: row | row-reverse | column | column-reverse;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 换行方式</span><br><span class=\"line\">    flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-direction 和 flex-wrap的简写，默认为 row nowrap</span><br><span class=\"line\">    flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // justify-content属性定义了项目在主轴上的对齐方式</span><br><span class=\"line\">    justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\"></span><br><span class=\"line\">    // align-items属性定义项目在交叉轴上如何对齐。</span><br><span class=\"line\">    align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\"></span><br><span class=\"line\">    // align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span><br><span class=\"line\">    align-content: flex-start | flex-end | center | space-between | space-around | stretch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h4><p>项目属性同样也有6个<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    // order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</span><br><span class=\"line\">    <span class=\"selector-tag\">order</span>: &lt;<span class=\"selector-tag\">integer</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class=\"line\">    <span class=\"selector-tag\">flex-grow</span>: &lt;<span class=\"selector-tag\">number</span>&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class=\"line\">    <span class=\"selector-tag\">flex-shrink</span>:  &lt;<span class=\"selector-tag\">number</span>&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    //  flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class=\"line\">     flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class=\"line\"></span><br><span class=\"line\">    // 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span><br><span class=\"line\">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</span><br><span class=\"line\">  flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br><span class=\"line\"></span><br><span class=\"line\">  //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默</span><br><span class=\"line\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"相对定位实现\"><a href=\"#相对定位实现\" class=\"headerlink\" title=\"相对定位实现\"></a>相对定位实现</h4><p>直接看demo啦<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过-margin和相对定位实现</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;        </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决 “中间栏div内容不被遮挡”问题的思路不一样。 </p>\n<p>html结构有所改变<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;        </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css简单了，不需要相对定位了</p>\n<h4 id=\"flex实现\"><a href=\"#flex实现\" class=\"headerlink\" title=\"flex实现\"></a>flex实现</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>个人最喜欢的实现方式</p>\n<h4 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h4><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。多了1个div，少用大致4个css属性（圣杯布局中间divpadding-left和padding-right这2个属性）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>css一只是我很薄弱的一个点，也一直不够重视。最近写一个页面的时候，常见的圣杯布局就写得很难受，所以就趁机好好学习一把。哈哈</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>阮一峰老师写的很全面了，浅显易懂。从自己的角度理解一下</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">flex布局——语法篇</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex布局——实例篇</a></p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<h4 id=\"容器（container）的属性\"><a href=\"#容器（container）的属性\" class=\"headerlink\" title=\"容器（container）的属性\"></a>容器（container）的属性</h4><p>任何容器都可以指定为flex布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>容器一共有以下6个属性,第一个为默认值<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    // 项目的排列方向</span><br><span class=\"line\">    flex-direction: row | row-reverse | column | column-reverse;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 换行方式</span><br><span class=\"line\">    flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-direction 和 flex-wrap的简写，默认为 row nowrap</span><br><span class=\"line\">    flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // justify-content属性定义了项目在主轴上的对齐方式</span><br><span class=\"line\">    justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\"></span><br><span class=\"line\">    // align-items属性定义项目在交叉轴上如何对齐。</span><br><span class=\"line\">    align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\"></span><br><span class=\"line\">    // align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span><br><span class=\"line\">    align-content: flex-start | flex-end | center | space-between | space-around | stretch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h4><p>项目属性同样也有6个<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    // order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</span><br><span class=\"line\">    <span class=\"selector-tag\">order</span>: &lt;<span class=\"selector-tag\">integer</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class=\"line\">    <span class=\"selector-tag\">flex-grow</span>: &lt;<span class=\"selector-tag\">number</span>&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class=\"line\">    <span class=\"selector-tag\">flex-shrink</span>:  &lt;<span class=\"selector-tag\">number</span>&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    //  flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class=\"line\">     flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class=\"line\"></span><br><span class=\"line\">    // 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span><br><span class=\"line\">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</span><br><span class=\"line\">  flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br><span class=\"line\"></span><br><span class=\"line\">  //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默</span><br><span class=\"line\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"相对定位实现\"><a href=\"#相对定位实现\" class=\"headerlink\" title=\"相对定位实现\"></a>相对定位实现</h4><p>直接看demo啦<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过-margin和相对定位实现</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;        </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h4><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决 “中间栏div内容不被遮挡”问题的思路不一样。 </p>\n<p>html结构有所改变<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;        </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css简单了，不需要相对定位了</p>\n<h4 id=\"flex实现\"><a href=\"#flex实现\" class=\"headerlink\" title=\"flex实现\"></a>flex实现</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">90vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>个人最喜欢的实现方式</p>\n<h4 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h4><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。多了1个div，少用大致4个css属性（圣杯布局中间divpadding-left和padding-right这2个属性）。</p>\n"},{"title":"es6之let","date":"2018-03-13T07:26:31.000Z","_content":"## 概述\n在写上一篇文章，关于cookie的操作时有一个demo，涉及到一个作用域的问题，实验了一下，然后又归纳小结了一波，主要还是参考[阮大的es6入门](http://es6.ruanyifeng.com/#docs/let)，也算是面试经常问的问题，let和var的区别，之前都会回答块级作用域，具体一点的，申明提前，暂时性死区的都会大概提一提。想想还是好好梳理一下好了。\n\n### 不存在变量提升\n变量提升可以换一个词，在代码编译阶段做的申明提前操作。\n随便看几个demo，和var的对比很容易看出来\n```js\nconsole.log(a) // undefined\nvar a = 'var'\n\nconsole.log(b) // 报错，b is not defined\nlet b = 'let'\n```\n那么再看一个demo,涉及到作用域的\n```js\nvar globalObj = {a:1}\nvar func = function() {\n    console.log(globalObj)  //undefined\n    globalObj.b = 2         //报错，cannot 'b' of undefined\n    var globalObj = asdasd\n}\nconsole.log(globalObj)\n```\n虽然globalObj是全局作用域下，func也在里面，但是在内部局部的globalObj优先级高，虽然globalObj在内层是undefined也不影响。\n今天在看犀牛书关于cookie操作的时候有个demo就有这个问题p591\n\n### 暂时性死区\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n继续用上一个demo，换成es6的版本，报的错不一样。\n这么做个人感觉挺好，也算是一种规范，以前变量申明之前是可以用这个变量的，值是undefined，这样造成了很多意想不到的情况。\ntips：typeOf方法也有可能报错啦\n```js\nlet globalObj = {a:1}\nconst func = () => {\n    console.log(globalObj)  //Identifier 'globalObj' has already been declared\n    globalObj.b = 2\n    let globalObj = asdasd\n}\nconsole.log(globalObj)\n```\n\n### 不允许重复申明\n```js\nvar a = 1\nvar a = 2\nlet b = 3\nlet b = 4 // b报错， b has been declared\n```\ntip: 函数的形参也可以理解为申明了局部变量，所以也不能再次申明\n### 块级作用域\n先看一下函数作用域不好的地方\n```js\nvar tmp = new Date();\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\nf(); // undefined\n```\n阮大给的这个demo挺nice的，f调用的时候本来是想tmp没有暴露到f的作用域下，引擎对tmp执行RHS查询，找到上一层作用域的tmp，但是if条件里面的逻辑没有形成作用域，tem在f函数中为局部变量。\n```js\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n```\n初学者写这种代码都没注意到内存泄露等问题，暴露过多的全局变量肯定是不好的。","source":"_posts/es6之let.md","raw":"---\ntitle: es6之let\ndate: 2018-03-13 15:26:31\ntags: es6\ncategory: 读书笔记\n---\n## 概述\n在写上一篇文章，关于cookie的操作时有一个demo，涉及到一个作用域的问题，实验了一下，然后又归纳小结了一波，主要还是参考[阮大的es6入门](http://es6.ruanyifeng.com/#docs/let)，也算是面试经常问的问题，let和var的区别，之前都会回答块级作用域，具体一点的，申明提前，暂时性死区的都会大概提一提。想想还是好好梳理一下好了。\n\n### 不存在变量提升\n变量提升可以换一个词，在代码编译阶段做的申明提前操作。\n随便看几个demo，和var的对比很容易看出来\n```js\nconsole.log(a) // undefined\nvar a = 'var'\n\nconsole.log(b) // 报错，b is not defined\nlet b = 'let'\n```\n那么再看一个demo,涉及到作用域的\n```js\nvar globalObj = {a:1}\nvar func = function() {\n    console.log(globalObj)  //undefined\n    globalObj.b = 2         //报错，cannot 'b' of undefined\n    var globalObj = asdasd\n}\nconsole.log(globalObj)\n```\n虽然globalObj是全局作用域下，func也在里面，但是在内部局部的globalObj优先级高，虽然globalObj在内层是undefined也不影响。\n今天在看犀牛书关于cookie操作的时候有个demo就有这个问题p591\n\n### 暂时性死区\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n继续用上一个demo，换成es6的版本，报的错不一样。\n这么做个人感觉挺好，也算是一种规范，以前变量申明之前是可以用这个变量的，值是undefined，这样造成了很多意想不到的情况。\ntips：typeOf方法也有可能报错啦\n```js\nlet globalObj = {a:1}\nconst func = () => {\n    console.log(globalObj)  //Identifier 'globalObj' has already been declared\n    globalObj.b = 2\n    let globalObj = asdasd\n}\nconsole.log(globalObj)\n```\n\n### 不允许重复申明\n```js\nvar a = 1\nvar a = 2\nlet b = 3\nlet b = 4 // b报错， b has been declared\n```\ntip: 函数的形参也可以理解为申明了局部变量，所以也不能再次申明\n### 块级作用域\n先看一下函数作用域不好的地方\n```js\nvar tmp = new Date();\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\nf(); // undefined\n```\n阮大给的这个demo挺nice的，f调用的时候本来是想tmp没有暴露到f的作用域下，引擎对tmp执行RHS查询，找到上一层作用域的tmp，但是if条件里面的逻辑没有形成作用域，tem在f函数中为局部变量。\n```js\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n```\n初学者写这种代码都没注意到内存泄露等问题，暴露过多的全局变量肯定是不好的。","slug":"es6之let","published":1,"updated":"2018-03-13T10:01:00.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4m000958qgbi0no9rx","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在写上一篇文章，关于cookie的操作时有一个demo，涉及到一个作用域的问题，实验了一下，然后又归纳小结了一波，主要还是参考<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮大的es6入门</a>，也算是面试经常问的问题，let和var的区别，之前都会回答块级作用域，具体一点的，申明提前，暂时性死区的都会大概提一提。想想还是好好梳理一下好了。</p>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p>变量提升可以换一个词，在代码编译阶段做的申明提前操作。<br>随便看几个demo，和var的对比很容易看出来<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'var'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 报错，b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">'let'</span></span><br></pre></td></tr></table></figure></p>\n<p>那么再看一个demo,涉及到作用域的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalObj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(globalObj)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    globalObj.b = <span class=\"number\">2</span>         <span class=\"comment\">//报错，cannot 'b' of undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> globalObj = asdasd</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(globalObj)</span><br></pre></td></tr></table></figure></p>\n<p>虽然globalObj是全局作用域下，func也在里面，但是在内部局部的globalObj优先级高，虽然globalObj在内层是undefined也不影响。<br>今天在看犀牛书关于cookie操作的时候有个demo就有这个问题p591</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>继续用上一个demo，换成es6的版本，报的错不一样。<br>这么做个人感觉挺好，也算是一种规范，以前变量申明之前是可以用这个变量的，值是undefined，这样造成了很多意想不到的情况。<br>tips：typeOf方法也有可能报错啦<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> globalObj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(globalObj)  <span class=\"comment\">//Identifier 'globalObj' has already been declared</span></span><br><span class=\"line\">    globalObj.b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> globalObj = asdasd</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(globalObj)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"不允许重复申明\"><a href=\"#不允许重复申明\" class=\"headerlink\" title=\"不允许重复申明\"></a>不允许重复申明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">4</span> <span class=\"comment\">// b报错， b has been declared</span></span><br></pre></td></tr></table></figure>\n<p>tip: 函数的形参也可以理解为申明了局部变量，所以也不能再次申明</p>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>先看一下函数作用域不好的地方<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>阮大给的这个demo挺nice的，f调用的时候本来是想tmp没有暴露到f的作用域下，引擎对tmp执行RHS查询，找到上一层作用域的tmp，但是if条件里面的逻辑没有形成作用域，tem在f函数中为局部变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>初学者写这种代码都没注意到内存泄露等问题，暴露过多的全局变量肯定是不好的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在写上一篇文章，关于cookie的操作时有一个demo，涉及到一个作用域的问题，实验了一下，然后又归纳小结了一波，主要还是参考<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮大的es6入门</a>，也算是面试经常问的问题，let和var的区别，之前都会回答块级作用域，具体一点的，申明提前，暂时性死区的都会大概提一提。想想还是好好梳理一下好了。</p>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p>变量提升可以换一个词，在代码编译阶段做的申明提前操作。<br>随便看几个demo，和var的对比很容易看出来<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'var'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 报错，b is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">'let'</span></span><br></pre></td></tr></table></figure></p>\n<p>那么再看一个demo,涉及到作用域的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalObj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(globalObj)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    globalObj.b = <span class=\"number\">2</span>         <span class=\"comment\">//报错，cannot 'b' of undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> globalObj = asdasd</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(globalObj)</span><br></pre></td></tr></table></figure></p>\n<p>虽然globalObj是全局作用域下，func也在里面，但是在内部局部的globalObj优先级高，虽然globalObj在内层是undefined也不影响。<br>今天在看犀牛书关于cookie操作的时候有个demo就有这个问题p591</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>继续用上一个demo，换成es6的版本，报的错不一样。<br>这么做个人感觉挺好，也算是一种规范，以前变量申明之前是可以用这个变量的，值是undefined，这样造成了很多意想不到的情况。<br>tips：typeOf方法也有可能报错啦<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> globalObj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(globalObj)  <span class=\"comment\">//Identifier 'globalObj' has already been declared</span></span><br><span class=\"line\">    globalObj.b = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> globalObj = asdasd</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(globalObj)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"不允许重复申明\"><a href=\"#不允许重复申明\" class=\"headerlink\" title=\"不允许重复申明\"></a>不允许重复申明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">4</span> <span class=\"comment\">// b报错， b has been declared</span></span><br></pre></td></tr></table></figure>\n<p>tip: 函数的形参也可以理解为申明了局部变量，所以也不能再次申明</p>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>先看一下函数作用域不好的地方<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>阮大给的这个demo挺nice的，f调用的时候本来是想tmp没有暴露到f的作用域下，引擎对tmp执行RHS查询，找到上一层作用域的tmp，但是if条件里面的逻辑没有形成作用域，tem在f函数中为局部变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>初学者写这种代码都没注意到内存泄露等问题，暴露过多的全局变量肯定是不好的。</p>\n"},{"title":"javascript权威指南-第三章（类型）","date":"2018-03-13T07:29:36.000Z","_content":"## 概述\n这一章主要是讲类型、值、变量。以前觉得大概都知道，但是静下心来好好看，还是看到了很多以前理解错误的地方。\n### 数据类型\njs中的数据类型：分为基本类型和引用类型\nstring num boolean undefined null，引用类型就是指object这一个大的类别，包括function array等。\nnull可以理解为特殊的对象值。理解了这个，typeof返回什么之类的就很清晰了。\n### num\n1. Math.max(...args) 居然原生支持取出最大值/最小值的api\n2. Infinity 的概念。0/0 ,无穷大除以无穷大，或者强制转不能转成数字的操作都会返回NaN\n3. Infinity 和 NaN 都只是可读的\n4. NaN和谁都不相等。判断是不是NaN的方法 x != x.这个函数的作用和isNaN相识\n5. 实数有无数个，但是js只能表现有限的个数。That is to say,js中实数都是一个近似值。2进制的表示法表示不了0.1这样的数字，所以 0.3-0.2 === 0.2-0.1返回false \n\n### string\nstring是基本的数据类型，任何操作都不会改变它，虽然可以操作数组一样操作它。<a href = 'http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html'>注意区分slice、substring、substr的区别</a>\n简单来说，3个方法都可以截取字符串的一段，从开始位置到结束位置(不包括结束位置)，区别体现在位置参数为负数的时候\n\n### bool值\n涉及到一个强转的问题。null undefined 0 -0 NaN '' 都会转为false\n### null 和 undefined\nnull: 关键字。表示对象字符串num是无值的，也是一个对象，表示‘非对象’\n\nundefined：不是关键字。表示变量没有初始化\n### 包装对象\n存取字符串数字bool的属性的时候创建的对象，包装对象和原始值不全等\n这里还是有点坑的，只是不愿意去理解太多。\n### 不可变和可变\n一言以蔽之，基本类型都是不可变的，引用类型都是可变的。\n\n```js\nlet a = {a:1,b:2}\nlet b = a // b只是通过a拿到对象的引用，a,b指向的都是同一个内存空间\nb.a = 3\na //也会改变\n```\n可以看下<a href = 'https://gycdgg.github.io/2017/08/31/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/'>对象拷贝简单实现</a>\n### 类型转换\n== 和 === 的区别在于==在比较之前做了一次类型转换。\n**太多规则，记不住。以后再看**\n\n### 变量作用域\n你不知道的js看了太多了。声明提前的操作在代码编译阶段，不是在执行阶段。一个有意思的代码块\n```js\nvar scope = 'global'\nfunction test(){\n    console.log(scope)  // undefined,不是global，一定要注意，局部变量始终在函数体中有定义\n    var scope = 'local'\n    console.log(scope)  // 'local'\n}\n```\n\n###总结\n都是自己理解上不太准确的地方，或者说容易忘记的地方。记录一下","source":"_posts/javascript权威指南-第三章（类型）.md","raw":"---\ntitle: javascript权威指南-第三章（类型）\ndate: 2018-03-13 15:29:36\ntags: 读书笔记\ncategory: 读书笔记\n---\n## 概述\n这一章主要是讲类型、值、变量。以前觉得大概都知道，但是静下心来好好看，还是看到了很多以前理解错误的地方。\n### 数据类型\njs中的数据类型：分为基本类型和引用类型\nstring num boolean undefined null，引用类型就是指object这一个大的类别，包括function array等。\nnull可以理解为特殊的对象值。理解了这个，typeof返回什么之类的就很清晰了。\n### num\n1. Math.max(...args) 居然原生支持取出最大值/最小值的api\n2. Infinity 的概念。0/0 ,无穷大除以无穷大，或者强制转不能转成数字的操作都会返回NaN\n3. Infinity 和 NaN 都只是可读的\n4. NaN和谁都不相等。判断是不是NaN的方法 x != x.这个函数的作用和isNaN相识\n5. 实数有无数个，但是js只能表现有限的个数。That is to say,js中实数都是一个近似值。2进制的表示法表示不了0.1这样的数字，所以 0.3-0.2 === 0.2-0.1返回false \n\n### string\nstring是基本的数据类型，任何操作都不会改变它，虽然可以操作数组一样操作它。<a href = 'http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html'>注意区分slice、substring、substr的区别</a>\n简单来说，3个方法都可以截取字符串的一段，从开始位置到结束位置(不包括结束位置)，区别体现在位置参数为负数的时候\n\n### bool值\n涉及到一个强转的问题。null undefined 0 -0 NaN '' 都会转为false\n### null 和 undefined\nnull: 关键字。表示对象字符串num是无值的，也是一个对象，表示‘非对象’\n\nundefined：不是关键字。表示变量没有初始化\n### 包装对象\n存取字符串数字bool的属性的时候创建的对象，包装对象和原始值不全等\n这里还是有点坑的，只是不愿意去理解太多。\n### 不可变和可变\n一言以蔽之，基本类型都是不可变的，引用类型都是可变的。\n\n```js\nlet a = {a:1,b:2}\nlet b = a // b只是通过a拿到对象的引用，a,b指向的都是同一个内存空间\nb.a = 3\na //也会改变\n```\n可以看下<a href = 'https://gycdgg.github.io/2017/08/31/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/'>对象拷贝简单实现</a>\n### 类型转换\n== 和 === 的区别在于==在比较之前做了一次类型转换。\n**太多规则，记不住。以后再看**\n\n### 变量作用域\n你不知道的js看了太多了。声明提前的操作在代码编译阶段，不是在执行阶段。一个有意思的代码块\n```js\nvar scope = 'global'\nfunction test(){\n    console.log(scope)  // undefined,不是global，一定要注意，局部变量始终在函数体中有定义\n    var scope = 'local'\n    console.log(scope)  // 'local'\n}\n```\n\n###总结\n都是自己理解上不太准确的地方，或者说容易忘记的地方。记录一下","slug":"javascript权威指南-第三章（类型）","published":1,"updated":"2018-03-13T10:01:00.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4q000c58qg938ls7g7","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>这一章主要是讲类型、值、变量。以前觉得大概都知道，但是静下心来好好看，还是看到了很多以前理解错误的地方。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>js中的数据类型：分为基本类型和引用类型<br>string num boolean undefined null，引用类型就是指object这一个大的类别，包括function array等。<br>null可以理解为特殊的对象值。理解了这个，typeof返回什么之类的就很清晰了。</p>\n<h3 id=\"num\"><a href=\"#num\" class=\"headerlink\" title=\"num\"></a>num</h3><ol>\n<li>Math.max(…args) 居然原生支持取出最大值/最小值的api</li>\n<li>Infinity 的概念。0/0 ,无穷大除以无穷大，或者强制转不能转成数字的操作都会返回NaN</li>\n<li>Infinity 和 NaN 都只是可读的</li>\n<li>NaN和谁都不相等。判断是不是NaN的方法 x != x.这个函数的作用和isNaN相识</li>\n<li>实数有无数个，但是js只能表现有限的个数。That is to say,js中实数都是一个近似值。2进制的表示法表示不了0.1这样的数字，所以 0.3-0.2 === 0.2-0.1返回false </li>\n</ol>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是基本的数据类型，任何操作都不会改变它，虽然可以操作数组一样操作它。<a href=\"http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html\" target=\"_blank\" rel=\"noopener\">注意区分slice、substring、substr的区别</a><br>简单来说，3个方法都可以截取字符串的一段，从开始位置到结束位置(不包括结束位置)，区别体现在位置参数为负数的时候</p>\n<h3 id=\"bool值\"><a href=\"#bool值\" class=\"headerlink\" title=\"bool值\"></a>bool值</h3><p>涉及到一个强转的问题。null undefined 0 -0 NaN ‘’ 都会转为false</p>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><p>null: 关键字。表示对象字符串num是无值的，也是一个对象，表示‘非对象’</p>\n<p>undefined：不是关键字。表示变量没有初始化</p>\n<h3 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h3><p>存取字符串数字bool的属性的时候创建的对象，包装对象和原始值不全等<br>这里还是有点坑的，只是不愿意去理解太多。</p>\n<h3 id=\"不可变和可变\"><a href=\"#不可变和可变\" class=\"headerlink\" title=\"不可变和可变\"></a>不可变和可变</h3><p>一言以蔽之，基本类型都是不可变的，引用类型都是可变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a <span class=\"comment\">// b只是通过a拿到对象的引用，a,b指向的都是同一个内存空间</span></span><br><span class=\"line\">b.a = <span class=\"number\">3</span></span><br><span class=\"line\">a <span class=\"comment\">//也会改变</span></span><br></pre></td></tr></table></figure>\n<p>可以看下<a href=\"https://gycdgg.github.io/2017/08/31/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/\" target=\"_blank\" rel=\"noopener\">对象拷贝简单实现</a></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>== 和 === 的区别在于==在比较之前做了一次类型转换。<br><strong>太多规则，记不住。以后再看</strong></p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><p>你不知道的js看了太多了。声明提前的操作在代码编译阶段，不是在执行阶段。一个有意思的代码块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(scope)  <span class=\"comment\">// undefined,不是global，一定要注意，局部变量始终在函数体中有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(scope)  <span class=\"comment\">// 'local'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>###总结<br>都是自己理解上不太准确的地方，或者说容易忘记的地方。记录一下</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>这一章主要是讲类型、值、变量。以前觉得大概都知道，但是静下心来好好看，还是看到了很多以前理解错误的地方。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>js中的数据类型：分为基本类型和引用类型<br>string num boolean undefined null，引用类型就是指object这一个大的类别，包括function array等。<br>null可以理解为特殊的对象值。理解了这个，typeof返回什么之类的就很清晰了。</p>\n<h3 id=\"num\"><a href=\"#num\" class=\"headerlink\" title=\"num\"></a>num</h3><ol>\n<li>Math.max(…args) 居然原生支持取出最大值/最小值的api</li>\n<li>Infinity 的概念。0/0 ,无穷大除以无穷大，或者强制转不能转成数字的操作都会返回NaN</li>\n<li>Infinity 和 NaN 都只是可读的</li>\n<li>NaN和谁都不相等。判断是不是NaN的方法 x != x.这个函数的作用和isNaN相识</li>\n<li>实数有无数个，但是js只能表现有限的个数。That is to say,js中实数都是一个近似值。2进制的表示法表示不了0.1这样的数字，所以 0.3-0.2 === 0.2-0.1返回false </li>\n</ol>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是基本的数据类型，任何操作都不会改变它，虽然可以操作数组一样操作它。<a href=\"http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html\" target=\"_blank\" rel=\"noopener\">注意区分slice、substring、substr的区别</a><br>简单来说，3个方法都可以截取字符串的一段，从开始位置到结束位置(不包括结束位置)，区别体现在位置参数为负数的时候</p>\n<h3 id=\"bool值\"><a href=\"#bool值\" class=\"headerlink\" title=\"bool值\"></a>bool值</h3><p>涉及到一个强转的问题。null undefined 0 -0 NaN ‘’ 都会转为false</p>\n<h3 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h3><p>null: 关键字。表示对象字符串num是无值的，也是一个对象，表示‘非对象’</p>\n<p>undefined：不是关键字。表示变量没有初始化</p>\n<h3 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h3><p>存取字符串数字bool的属性的时候创建的对象，包装对象和原始值不全等<br>这里还是有点坑的，只是不愿意去理解太多。</p>\n<h3 id=\"不可变和可变\"><a href=\"#不可变和可变\" class=\"headerlink\" title=\"不可变和可变\"></a>不可变和可变</h3><p>一言以蔽之，基本类型都是不可变的，引用类型都是可变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a <span class=\"comment\">// b只是通过a拿到对象的引用，a,b指向的都是同一个内存空间</span></span><br><span class=\"line\">b.a = <span class=\"number\">3</span></span><br><span class=\"line\">a <span class=\"comment\">//也会改变</span></span><br></pre></td></tr></table></figure>\n<p>可以看下<a href=\"https://gycdgg.github.io/2017/08/31/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/\" target=\"_blank\" rel=\"noopener\">对象拷贝简单实现</a></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>== 和 === 的区别在于==在比较之前做了一次类型转换。<br><strong>太多规则，记不住。以后再看</strong></p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><p>你不知道的js看了太多了。声明提前的操作在代码编译阶段，不是在执行阶段。一个有意思的代码块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'global'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(scope)  <span class=\"comment\">// undefined,不是global，一定要注意，局部变量始终在函数体中有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scope = <span class=\"string\">'local'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(scope)  <span class=\"comment\">// 'local'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>###总结<br>都是自己理解上不太准确的地方，或者说容易忘记的地方。记录一下</p>\n"},{"title":"2017年小结","date":"2018-03-13T07:34:03.000Z","_content":"\n## 写在毕业一年之际\n2017年，毕业一年了。做前端也满打满算一年了。\n\n### what i have done\n一年待了3家公司，不看理由，就冲这一点，感觉自己这方面做的不够好。跳槽中途的狗血不想吐槽了，跳槽的理由也不说了。这一年从最开始学习React开始，当时还是一个前端小白，本科也是学的自动化，自学了半个月只能写写静态页面，很庆幸遇到了亮哥这样的leader，一个10年工作经验的老程序员，看到了很多这个阶段程序员该有的素养，写东西也好，带的团队也让人很舒服，可以说这辈子不奢求能再遇到像亮哥这样的leader了。亮哥曾说过：**我做了这么久的开发，java转js，不管是java还是js，我只能说会用，或者说熟练使用他们做东西，不敢说精通**。我React，node啥的，算得上会用，不敢说熟练。其实这个年纪了，比较希望一个stable platform to settle down.\n中途去了一家Pre A互联网公司，跟亮哥提离职的时候，想了很久，说很想去互联网公司看一下，看一下他们的运作模式，看了之后也算是见识了很多，但是更多的还是失望。最大的感触，互联网整体环境还是**浮躁**的，尤其是规模和体量没到那一步的时候，天天画大饼，天天要融资， 每天都是鸡血。其实做的产品我自己都不能认可，我都觉得不好用，各种华而不实的需求。不过那段时间代码量上去了，天天写的比较多。我担心的是，一个浮躁的公司，人也会浮躁的吧，所以我走了\n### 前端圈的浮躁\n上面说到了浮躁，整个前端圈子也挺浮躁的，水平参差不齐，新的轮子炒来炒去，培训班每个月一大批出来的人，会用几个api就敢说精通js了。其实也一直害怕自己太浮躁，所以经常会看看书，之前水平不够，看的也很浅，或者说很多看不懂，做了一年了，也需要一个时间沉淀一下了。书读百遍，其义自现。\n最近开发强度很小，有很多自己支配的时间，也给自己定了一些小任务。\n### 最近干点啥呢\n前几天仔细读了犀牛书部分章节，也做了了一点记录。准备花2天时间好好看看underscore源码了，跟着敲敲，下一步就是系统的重新看一下css了，看了几个博客还是不太系统。然后就是之前从0开始写了一个react的前后端项目，之前写了个开头。不管读书还是源码学习，demo等都会同步到github。\n###\n","source":"_posts/2017年小结.md","raw":"---\ntitle: 2017年小结\ndate: 2018-03-13 15:34:03\ntags: 随便写写\ncategory: Diary\n---\n\n## 写在毕业一年之际\n2017年，毕业一年了。做前端也满打满算一年了。\n\n### what i have done\n一年待了3家公司，不看理由，就冲这一点，感觉自己这方面做的不够好。跳槽中途的狗血不想吐槽了，跳槽的理由也不说了。这一年从最开始学习React开始，当时还是一个前端小白，本科也是学的自动化，自学了半个月只能写写静态页面，很庆幸遇到了亮哥这样的leader，一个10年工作经验的老程序员，看到了很多这个阶段程序员该有的素养，写东西也好，带的团队也让人很舒服，可以说这辈子不奢求能再遇到像亮哥这样的leader了。亮哥曾说过：**我做了这么久的开发，java转js，不管是java还是js，我只能说会用，或者说熟练使用他们做东西，不敢说精通**。我React，node啥的，算得上会用，不敢说熟练。其实这个年纪了，比较希望一个stable platform to settle down.\n中途去了一家Pre A互联网公司，跟亮哥提离职的时候，想了很久，说很想去互联网公司看一下，看一下他们的运作模式，看了之后也算是见识了很多，但是更多的还是失望。最大的感触，互联网整体环境还是**浮躁**的，尤其是规模和体量没到那一步的时候，天天画大饼，天天要融资， 每天都是鸡血。其实做的产品我自己都不能认可，我都觉得不好用，各种华而不实的需求。不过那段时间代码量上去了，天天写的比较多。我担心的是，一个浮躁的公司，人也会浮躁的吧，所以我走了\n### 前端圈的浮躁\n上面说到了浮躁，整个前端圈子也挺浮躁的，水平参差不齐，新的轮子炒来炒去，培训班每个月一大批出来的人，会用几个api就敢说精通js了。其实也一直害怕自己太浮躁，所以经常会看看书，之前水平不够，看的也很浅，或者说很多看不懂，做了一年了，也需要一个时间沉淀一下了。书读百遍，其义自现。\n最近开发强度很小，有很多自己支配的时间，也给自己定了一些小任务。\n### 最近干点啥呢\n前几天仔细读了犀牛书部分章节，也做了了一点记录。准备花2天时间好好看看underscore源码了，跟着敲敲，下一步就是系统的重新看一下css了，看了几个博客还是不太系统。然后就是之前从0开始写了一个react的前后端项目，之前写了个开头。不管读书还是源码学习，demo等都会同步到github。\n###\n","slug":"2017年小结","published":1,"updated":"2018-03-13T10:01:00.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4s000e58qgjj4x5rgp","content":"<h2 id=\"写在毕业一年之际\"><a href=\"#写在毕业一年之际\" class=\"headerlink\" title=\"写在毕业一年之际\"></a>写在毕业一年之际</h2><p>2017年，毕业一年了。做前端也满打满算一年了。</p>\n<h3 id=\"what-i-have-done\"><a href=\"#what-i-have-done\" class=\"headerlink\" title=\"what i have done\"></a>what i have done</h3><p>一年待了3家公司，不看理由，就冲这一点，感觉自己这方面做的不够好。跳槽中途的狗血不想吐槽了，跳槽的理由也不说了。这一年从最开始学习React开始，当时还是一个前端小白，本科也是学的自动化，自学了半个月只能写写静态页面，很庆幸遇到了亮哥这样的leader，一个10年工作经验的老程序员，看到了很多这个阶段程序员该有的素养，写东西也好，带的团队也让人很舒服，可以说这辈子不奢求能再遇到像亮哥这样的leader了。亮哥曾说过：<strong>我做了这么久的开发，java转js，不管是java还是js，我只能说会用，或者说熟练使用他们做东西，不敢说精通</strong>。我React，node啥的，算得上会用，不敢说熟练。其实这个年纪了，比较希望一个stable platform to settle down.<br>中途去了一家Pre A互联网公司，跟亮哥提离职的时候，想了很久，说很想去互联网公司看一下，看一下他们的运作模式，看了之后也算是见识了很多，但是更多的还是失望。最大的感触，互联网整体环境还是<strong>浮躁</strong>的，尤其是规模和体量没到那一步的时候，天天画大饼，天天要融资， 每天都是鸡血。其实做的产品我自己都不能认可，我都觉得不好用，各种华而不实的需求。不过那段时间代码量上去了，天天写的比较多。我担心的是，一个浮躁的公司，人也会浮躁的吧，所以我走了</p>\n<h3 id=\"前端圈的浮躁\"><a href=\"#前端圈的浮躁\" class=\"headerlink\" title=\"前端圈的浮躁\"></a>前端圈的浮躁</h3><p>上面说到了浮躁，整个前端圈子也挺浮躁的，水平参差不齐，新的轮子炒来炒去，培训班每个月一大批出来的人，会用几个api就敢说精通js了。其实也一直害怕自己太浮躁，所以经常会看看书，之前水平不够，看的也很浅，或者说很多看不懂，做了一年了，也需要一个时间沉淀一下了。书读百遍，其义自现。<br>最近开发强度很小，有很多自己支配的时间，也给自己定了一些小任务。</p>\n<h3 id=\"最近干点啥呢\"><a href=\"#最近干点啥呢\" class=\"headerlink\" title=\"最近干点啥呢\"></a>最近干点啥呢</h3><p>前几天仔细读了犀牛书部分章节，也做了了一点记录。准备花2天时间好好看看underscore源码了，跟着敲敲，下一步就是系统的重新看一下css了，看了几个博客还是不太系统。然后就是之前从0开始写了一个react的前后端项目，之前写了个开头。不管读书还是源码学习，demo等都会同步到github。</p>\n<p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写在毕业一年之际\"><a href=\"#写在毕业一年之际\" class=\"headerlink\" title=\"写在毕业一年之际\"></a>写在毕业一年之际</h2><p>2017年，毕业一年了。做前端也满打满算一年了。</p>\n<h3 id=\"what-i-have-done\"><a href=\"#what-i-have-done\" class=\"headerlink\" title=\"what i have done\"></a>what i have done</h3><p>一年待了3家公司，不看理由，就冲这一点，感觉自己这方面做的不够好。跳槽中途的狗血不想吐槽了，跳槽的理由也不说了。这一年从最开始学习React开始，当时还是一个前端小白，本科也是学的自动化，自学了半个月只能写写静态页面，很庆幸遇到了亮哥这样的leader，一个10年工作经验的老程序员，看到了很多这个阶段程序员该有的素养，写东西也好，带的团队也让人很舒服，可以说这辈子不奢求能再遇到像亮哥这样的leader了。亮哥曾说过：<strong>我做了这么久的开发，java转js，不管是java还是js，我只能说会用，或者说熟练使用他们做东西，不敢说精通</strong>。我React，node啥的，算得上会用，不敢说熟练。其实这个年纪了，比较希望一个stable platform to settle down.<br>中途去了一家Pre A互联网公司，跟亮哥提离职的时候，想了很久，说很想去互联网公司看一下，看一下他们的运作模式，看了之后也算是见识了很多，但是更多的还是失望。最大的感触，互联网整体环境还是<strong>浮躁</strong>的，尤其是规模和体量没到那一步的时候，天天画大饼，天天要融资， 每天都是鸡血。其实做的产品我自己都不能认可，我都觉得不好用，各种华而不实的需求。不过那段时间代码量上去了，天天写的比较多。我担心的是，一个浮躁的公司，人也会浮躁的吧，所以我走了</p>\n<h3 id=\"前端圈的浮躁\"><a href=\"#前端圈的浮躁\" class=\"headerlink\" title=\"前端圈的浮躁\"></a>前端圈的浮躁</h3><p>上面说到了浮躁，整个前端圈子也挺浮躁的，水平参差不齐，新的轮子炒来炒去，培训班每个月一大批出来的人，会用几个api就敢说精通js了。其实也一直害怕自己太浮躁，所以经常会看看书，之前水平不够，看的也很浅，或者说很多看不懂，做了一年了，也需要一个时间沉淀一下了。书读百遍，其义自现。<br>最近开发强度很小，有很多自己支配的时间，也给自己定了一些小任务。</p>\n<h3 id=\"最近干点啥呢\"><a href=\"#最近干点啥呢\" class=\"headerlink\" title=\"最近干点啥呢\"></a>最近干点啥呢</h3><p>前几天仔细读了犀牛书部分章节，也做了了一点记录。准备花2天时间好好看看underscore源码了，跟着敲敲，下一步就是系统的重新看一下css了，看了几个博客还是不太系统。然后就是之前从0开始写了一个react的前后端项目，之前写了个开头。不管读书还是源码学习，demo等都会同步到github。</p>\n<p>###</p>\n"},{"title":"javascript权威指南-第二十章（客户端存储）","date":"2018-03-13T07:28:14.000Z","_content":"## 概述\n二十章讲的是客户端存储，很详细的介绍了常见的几种客户端存储的方式。涉及到一些同源策略的东西，所以就想看一下13章的安全性的问题。也记录一下\n\n### 安全性\n同源策略：脚本不能读取不同服务器载入的文档内容。比如说一个页面的脚本不能监听其他页面的用户输入信息，这就是同源策略。这么来看同源策略是必须的，不然浏览一个网页，所有的其他页面的信息都暴露了。\n    但是确实有场景需要读取其他页面的属性，可以使用document的domain属性，domain默认是载入文档的主机名，可以人为设置，比如home.example.com可以设置成example.com。不能设置成home.example或者ample.com之类的，也必须有一个.（避免出现com的情况）如果2个窗口的domain一致，就没有同源限制啦。\n    跨域资源共享：origin，请求头设置Access-Control-Allow-Origin\n\n\n#### XSS(粗略了讲了一点安全问题)\n\n对于url:http://www.example.com/greet.html?David\n```js\n    let name = decodeURIComponent(window.location.search.substring(1)) // search可以拿到？之后的字段（可以理解为query字段？？？），转码之后可以拿到David\n    alert(name)\n```\n但是如果调用http://http.www.example.com/greet.html?name=%3Cscript src=siteB/evil.js%3E%3C/script%3E\n这样会注入一个来自siteB的脚本，脚本在sideB中，但是可以在A中进行操作，比较危险\n\n防止XSS的，通过不可信的数据来的时候，去掉里面的HTML标签（包括script标签）,\n简单的实现安全函数\n```js\nname = name.replace(/</g, '<').replace(/</g,'>')\n```\n### localStorage和sessionStorage的区别\n两者的区别在于存储的**有效期**和**作用域**不同，也就是可以存储多长时间以及谁对数据有访问权。\nstorage都定义了存储、获取、删除的方法\n\n#### 有效期和作用域\nlocalStorage的作用域是文档源级别。文档源就是协议主机和端口一致，也就是说同一个浏览器开多个窗口打开一个页面，是可以共享localStorage的。但是受浏览器供应商的限制。\nsessionStorage的作用域也是文档源级别，但是不太相同，它是限定在窗口中的。在不同的标签中不共享。\nsessionStorage在浏览器或者标签页关闭，sessionStorage里面存的数据会被删除。\n\n#### 存储的API\n```js\nlocalStorage.setItem('x', 1)\nlocalStorage.getItem('X')\n/// 遍历\nfor(let i= 0; i< localStorage.length; i++ ){\n    let name = localStorage.key(i)\n    let value = localStorage.getItem(name)\n}\nlocalStorage.removeItem('X')    //删除X项\nlocalStorage.clear()            //全部删除\n```\n\n### cookie\n\n#### cookie属性：有效期和作用域\n    cookie的默认有效期是浏览器的会话期间。但是和sessionStorage有区别，cookie不局限在浏览器单个窗口，有效期和整个浏览器的进程有关。\n    通过max-age设置有效期设置有效期，他的作用域可以通过path和domain来配置，默认情况和创建他的web页面有关，对子页面可见。\n**如果路径设置成'/'就和localStorage一样的作用域了**\n\n#### 保存cookie\n```js\n// cookie中不允许包含分毫、逗号和空白符，所以一般采用encodeURIComponent转码\n// 最简单的cookie设置，浏览器关闭清除\ndocument.cookie = 'version=' + encodeURIComponent(document.lastModified)\n\n// 一个可选max-age、path、domain、secure属性的方法\n// 通过设置domain可以解决cookie跨域的问题\nconst setCookie = (name, value, daysTolive, path, path) = {\n    let cookie = `${name}=${encodeURLComponent(value)}`\n    if(typeOf daysToLive === 'number'){\n        cookie += `; max-age=${daysToLive * 60 * 60 * 24}`\n    }\n    if(path){\n        cookie += `; path=${path}`\n    }\n    if(domain){\n        cookie += `; domain=${domain}`\n    }\n    document.cookie = cookie\n}\n```\n#### 读取cookie\n通过document.cookie读取出来的是一个字符串，不同键值对通过f分号和空格隔开。value的解码方式取决于之前存储用的方式，例如上面用到的setCookie中用的方式是encodeURIComponent编码\n```js\nconst getCookie = (){\n    let cookieObj = {}\n    let cookieStr = document.cookie\n    if(cookieStr === ''){\n        return cookieObj\n    }\n    let cookieArr = cookieStr.split('; ')\n    for(let _cookie of cookieArr){\n        let p = _cookie.indexOf('=')\n        let name = _cookie.slice(0,p)\n        let value = _cookie.slice(p+1)\n        value = decodeURIComponent(value)\n        cookieObj[name] = value\n    }\n    return cookieObj\n}\n```\n#### cookie相关的存储\n实现类似于sessionStorage的getItem、setItem、remove、delete等功能\n```js\nconst cookieStorage(maxage, path) {\n    //自执行函数实例化一个cookie对象\n    let cookie = (()=>{\n        let cookieObj = {}\n        let cookieStr = document.cookie\n        if(cookieStr === ''){\n        return cookieObj\n        }\n        let cookieArr = cookieStr.split('; ')\n        for(let _cookie of cookieArr){\n            let p = _cookie.indexOf('=')\n            let name = _cookie.slice(0,p)\n            let value = _cookie.slice(p+1)\n            value = decodeURIComponent(value)\n            cookieObj[name] = value\n        }\n        return cookieObj\n    }())\n    // 拿出所有的key\n    let keys = Object.keys(cookie)\n    //存储API公共的属性和方法\n    this.length = keys.length\n    //返回第n个key的名字，即key方法\n    this.key = (n) => {\n        if (n<0 || n >= keys.length) return null\n        return keys[n]\n    }\n    //getItem方法\n    this.getItem = (name) => cookie[name] || null\n    // setItem方法\n    this.setItem = (key,value) => {\n        //首先判断要存储的cookie存在不,不存在先操作一次keys和length\n        if(!(key in keys)){\n            keys.push(key)\n            this.length++\n        }\n        // 针对cookie对象做的操作\n        cookie[key] = value\n        //接下来就是正式操作浏览器中的cookie\n        let domCookie = `${key}=${encodeURIComponent(value)}`\n        if(maxage) domCookie += `; max-age=${maxage}`\n        if(path) domCookie += `; path=${path}`\n        document.cookie = domCookie\n    }\n    // removeCookie\n    this.removeItem = (key) => {\n        if(!(key in cookie)) return\n        delete cookie[key]\n        this.length--\n        let p = keys.indexOf(key)\n        keys.splice(p,1)\n        document.cookie = \n    }\n    // clear\n    this.clear = () => {\n        for(let key of keys){\n            document.cookie = `${key}=; max-age=0`\n        }\n        cookie = {}\n        keys = []\n        this.length = 0\n    }\n}\n```","source":"_posts/javascript权威指南-第二十章（客户端存储）.md","raw":"---\ntitle: javascript权威指南-第二十章（客户端存储）\ndate: 2018-03-13 15:28:14\ntags: 读书笔记\ncategory: 读书笔记\n---\n## 概述\n二十章讲的是客户端存储，很详细的介绍了常见的几种客户端存储的方式。涉及到一些同源策略的东西，所以就想看一下13章的安全性的问题。也记录一下\n\n### 安全性\n同源策略：脚本不能读取不同服务器载入的文档内容。比如说一个页面的脚本不能监听其他页面的用户输入信息，这就是同源策略。这么来看同源策略是必须的，不然浏览一个网页，所有的其他页面的信息都暴露了。\n    但是确实有场景需要读取其他页面的属性，可以使用document的domain属性，domain默认是载入文档的主机名，可以人为设置，比如home.example.com可以设置成example.com。不能设置成home.example或者ample.com之类的，也必须有一个.（避免出现com的情况）如果2个窗口的domain一致，就没有同源限制啦。\n    跨域资源共享：origin，请求头设置Access-Control-Allow-Origin\n\n\n#### XSS(粗略了讲了一点安全问题)\n\n对于url:http://www.example.com/greet.html?David\n```js\n    let name = decodeURIComponent(window.location.search.substring(1)) // search可以拿到？之后的字段（可以理解为query字段？？？），转码之后可以拿到David\n    alert(name)\n```\n但是如果调用http://http.www.example.com/greet.html?name=%3Cscript src=siteB/evil.js%3E%3C/script%3E\n这样会注入一个来自siteB的脚本，脚本在sideB中，但是可以在A中进行操作，比较危险\n\n防止XSS的，通过不可信的数据来的时候，去掉里面的HTML标签（包括script标签）,\n简单的实现安全函数\n```js\nname = name.replace(/</g, '<').replace(/</g,'>')\n```\n### localStorage和sessionStorage的区别\n两者的区别在于存储的**有效期**和**作用域**不同，也就是可以存储多长时间以及谁对数据有访问权。\nstorage都定义了存储、获取、删除的方法\n\n#### 有效期和作用域\nlocalStorage的作用域是文档源级别。文档源就是协议主机和端口一致，也就是说同一个浏览器开多个窗口打开一个页面，是可以共享localStorage的。但是受浏览器供应商的限制。\nsessionStorage的作用域也是文档源级别，但是不太相同，它是限定在窗口中的。在不同的标签中不共享。\nsessionStorage在浏览器或者标签页关闭，sessionStorage里面存的数据会被删除。\n\n#### 存储的API\n```js\nlocalStorage.setItem('x', 1)\nlocalStorage.getItem('X')\n/// 遍历\nfor(let i= 0; i< localStorage.length; i++ ){\n    let name = localStorage.key(i)\n    let value = localStorage.getItem(name)\n}\nlocalStorage.removeItem('X')    //删除X项\nlocalStorage.clear()            //全部删除\n```\n\n### cookie\n\n#### cookie属性：有效期和作用域\n    cookie的默认有效期是浏览器的会话期间。但是和sessionStorage有区别，cookie不局限在浏览器单个窗口，有效期和整个浏览器的进程有关。\n    通过max-age设置有效期设置有效期，他的作用域可以通过path和domain来配置，默认情况和创建他的web页面有关，对子页面可见。\n**如果路径设置成'/'就和localStorage一样的作用域了**\n\n#### 保存cookie\n```js\n// cookie中不允许包含分毫、逗号和空白符，所以一般采用encodeURIComponent转码\n// 最简单的cookie设置，浏览器关闭清除\ndocument.cookie = 'version=' + encodeURIComponent(document.lastModified)\n\n// 一个可选max-age、path、domain、secure属性的方法\n// 通过设置domain可以解决cookie跨域的问题\nconst setCookie = (name, value, daysTolive, path, path) = {\n    let cookie = `${name}=${encodeURLComponent(value)}`\n    if(typeOf daysToLive === 'number'){\n        cookie += `; max-age=${daysToLive * 60 * 60 * 24}`\n    }\n    if(path){\n        cookie += `; path=${path}`\n    }\n    if(domain){\n        cookie += `; domain=${domain}`\n    }\n    document.cookie = cookie\n}\n```\n#### 读取cookie\n通过document.cookie读取出来的是一个字符串，不同键值对通过f分号和空格隔开。value的解码方式取决于之前存储用的方式，例如上面用到的setCookie中用的方式是encodeURIComponent编码\n```js\nconst getCookie = (){\n    let cookieObj = {}\n    let cookieStr = document.cookie\n    if(cookieStr === ''){\n        return cookieObj\n    }\n    let cookieArr = cookieStr.split('; ')\n    for(let _cookie of cookieArr){\n        let p = _cookie.indexOf('=')\n        let name = _cookie.slice(0,p)\n        let value = _cookie.slice(p+1)\n        value = decodeURIComponent(value)\n        cookieObj[name] = value\n    }\n    return cookieObj\n}\n```\n#### cookie相关的存储\n实现类似于sessionStorage的getItem、setItem、remove、delete等功能\n```js\nconst cookieStorage(maxage, path) {\n    //自执行函数实例化一个cookie对象\n    let cookie = (()=>{\n        let cookieObj = {}\n        let cookieStr = document.cookie\n        if(cookieStr === ''){\n        return cookieObj\n        }\n        let cookieArr = cookieStr.split('; ')\n        for(let _cookie of cookieArr){\n            let p = _cookie.indexOf('=')\n            let name = _cookie.slice(0,p)\n            let value = _cookie.slice(p+1)\n            value = decodeURIComponent(value)\n            cookieObj[name] = value\n        }\n        return cookieObj\n    }())\n    // 拿出所有的key\n    let keys = Object.keys(cookie)\n    //存储API公共的属性和方法\n    this.length = keys.length\n    //返回第n个key的名字，即key方法\n    this.key = (n) => {\n        if (n<0 || n >= keys.length) return null\n        return keys[n]\n    }\n    //getItem方法\n    this.getItem = (name) => cookie[name] || null\n    // setItem方法\n    this.setItem = (key,value) => {\n        //首先判断要存储的cookie存在不,不存在先操作一次keys和length\n        if(!(key in keys)){\n            keys.push(key)\n            this.length++\n        }\n        // 针对cookie对象做的操作\n        cookie[key] = value\n        //接下来就是正式操作浏览器中的cookie\n        let domCookie = `${key}=${encodeURIComponent(value)}`\n        if(maxage) domCookie += `; max-age=${maxage}`\n        if(path) domCookie += `; path=${path}`\n        document.cookie = domCookie\n    }\n    // removeCookie\n    this.removeItem = (key) => {\n        if(!(key in cookie)) return\n        delete cookie[key]\n        this.length--\n        let p = keys.indexOf(key)\n        keys.splice(p,1)\n        document.cookie = \n    }\n    // clear\n    this.clear = () => {\n        for(let key of keys){\n            document.cookie = `${key}=; max-age=0`\n        }\n        cookie = {}\n        keys = []\n        this.length = 0\n    }\n}\n```","slug":"javascript权威指南-第二十章（客户端存储）","published":1,"updated":"2018-03-13T10:01:00.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf2dos4u000f58qg2iscrxsc","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>二十章讲的是客户端存储，很详细的介绍了常见的几种客户端存储的方式。涉及到一些同源策略的东西，所以就想看一下13章的安全性的问题。也记录一下</p>\n<h3 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h3><p>同源策略：脚本不能读取不同服务器载入的文档内容。比如说一个页面的脚本不能监听其他页面的用户输入信息，这就是同源策略。这么来看同源策略是必须的，不然浏览一个网页，所有的其他页面的信息都暴露了。<br>    但是确实有场景需要读取其他页面的属性，可以使用document的domain属性，domain默认是载入文档的主机名，可以人为设置，比如home.example.com可以设置成example.com。不能设置成home.example或者ample.com之类的，也必须有一个.（避免出现com的情况）如果2个窗口的domain一致，就没有同源限制啦。<br>    跨域资源共享：origin，请求头设置Access-Control-Allow-Origin</p>\n<h4 id=\"XSS-粗略了讲了一点安全问题\"><a href=\"#XSS-粗略了讲了一点安全问题\" class=\"headerlink\" title=\"XSS(粗略了讲了一点安全问题)\"></a>XSS(粗略了讲了一点安全问题)</h4><p>对于url:<a href=\"http://www.example.com/greet.html?David\" target=\"_blank\" rel=\"noopener\">http://www.example.com/greet.html?David</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">window</span>.location.search.substring(<span class=\"number\">1</span>)) <span class=\"comment\">// search可以拿到？之后的字段（可以理解为query字段？？？），转码之后可以拿到David</span></span><br><span class=\"line\">alert(name)</span><br></pre></td></tr></table></figure></p>\n<p>但是如果调用<a href=\"http://http.www.example.com/greet.html?name=%3Cscript\" target=\"_blank\" rel=\"noopener\">http://http.www.example.com/greet.html?name=%3Cscript</a> src=siteB/evil.js%3E%3C/script%3E<br>这样会注入一个来自siteB的脚本，脚本在sideB中，但是可以在A中进行操作，比较危险</p>\n<p>防止XSS的，通过不可信的数据来的时候，去掉里面的HTML标签（包括script标签）,<br>简单的实现安全函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = name.replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&lt;/g</span>,<span class=\"string\">'&gt;'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h3><p>两者的区别在于存储的<strong>有效期</strong>和<strong>作用域</strong>不同，也就是可以存储多长时间以及谁对数据有访问权。<br>storage都定义了存储、获取、删除的方法</p>\n<h4 id=\"有效期和作用域\"><a href=\"#有效期和作用域\" class=\"headerlink\" title=\"有效期和作用域\"></a>有效期和作用域</h4><p>localStorage的作用域是文档源级别。文档源就是协议主机和端口一致，也就是说同一个浏览器开多个窗口打开一个页面，是可以共享localStorage的。但是受浏览器供应商的限制。<br>sessionStorage的作用域也是文档源级别，但是不太相同，它是限定在窗口中的。在不同的标签中不共享。<br>sessionStorage在浏览器或者标签页关闭，sessionStorage里面存的数据会被删除。</p>\n<h4 id=\"存储的API\"><a href=\"#存储的API\" class=\"headerlink\" title=\"存储的API\"></a>存储的API</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">'x'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">localStorage.getItem(<span class=\"string\">'X'</span>)</span><br><span class=\"line\"><span class=\"comment\">/// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i= <span class=\"number\">0</span>; i&lt; localStorage.length; i++ )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = localStorage.key(i)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = localStorage.getItem(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">'X'</span>)    <span class=\"comment\">//删除X项</span></span><br><span class=\"line\">localStorage.clear()            <span class=\"comment\">//全部删除</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><h4 id=\"cookie属性：有效期和作用域\"><a href=\"#cookie属性：有效期和作用域\" class=\"headerlink\" title=\"cookie属性：有效期和作用域\"></a>cookie属性：有效期和作用域</h4><pre><code>cookie的默认有效期是浏览器的会话期间。但是和sessionStorage有区别，cookie不局限在浏览器单个窗口，有效期和整个浏览器的进程有关。\n通过max-age设置有效期设置有效期，他的作用域可以通过path和domain来配置，默认情况和创建他的web页面有关，对子页面可见。\n</code></pre><p><strong>如果路径设置成’/‘就和localStorage一样的作用域了</strong></p>\n<h4 id=\"保存cookie\"><a href=\"#保存cookie\" class=\"headerlink\" title=\"保存cookie\"></a>保存cookie</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cookie中不允许包含分毫、逗号和空白符，所以一般采用encodeURIComponent转码</span></span><br><span class=\"line\"><span class=\"comment\">// 最简单的cookie设置，浏览器关闭清除</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">'version='</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">document</span>.lastModified)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个可选max-age、path、domain、secure属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 通过设置domain可以解决cookie跨域的问题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCookie = (name, value, daysTolive, path, path) = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>=<span class=\"subst\">$&#123;encodeURLComponent(value)&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeOf daysToLive === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; max-age=<span class=\"subst\">$&#123;daysToLive * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(path)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; path=<span class=\"subst\">$&#123;path&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(domain)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; domain=<span class=\"subst\">$&#123;domain&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取cookie</h4><p>通过document.cookie读取出来的是一个字符串，不同键值对通过f分号和空格隔开。value的解码方式取决于之前存储用的方式，例如上面用到的setCookie中用的方式是encodeURIComponent编码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCookie = ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieObj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieStr = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cookieStr === <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieArr = cookieStr.split(<span class=\"string\">'; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> _cookie <span class=\"keyword\">of</span> cookieArr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = _cookie.indexOf(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> name = _cookie.slice(<span class=\"number\">0</span>,p)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = _cookie.slice(p+<span class=\"number\">1</span>)</span><br><span class=\"line\">        value = <span class=\"built_in\">decodeURIComponent</span>(value)</span><br><span class=\"line\">        cookieObj[name] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"cookie相关的存储\"><a href=\"#cookie相关的存储\" class=\"headerlink\" title=\"cookie相关的存储\"></a>cookie相关的存储</h4><p>实现类似于sessionStorage的getItem、setItem、remove、delete等功能<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cookieStorage(maxage, path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//自执行函数实例化一个cookie对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = <span class=\"function\">(<span class=\"params\">(</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieObj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieStr = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cookieStr === <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieArr = cookieStr.split(<span class=\"string\">'; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> _cookie <span class=\"keyword\">of</span> cookieArr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = _cookie.indexOf(<span class=\"string\">'='</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> name = _cookie.slice(<span class=\"number\">0</span>,p)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = _cookie.slice(p+<span class=\"number\">1</span>)</span><br><span class=\"line\">            value = <span class=\"built_in\">decodeURIComponent</span>(value)</span><br><span class=\"line\">            cookieObj[name] = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">    &#125;())</span><br><span class=\"line\">    <span class=\"comment\">// 拿出所有的key</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(cookie)</span><br><span class=\"line\">    <span class=\"comment\">//存储API公共的属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = keys.length</span><br><span class=\"line\">    <span class=\"comment\">//返回第n个key的名字，即key方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">0</span> || n &gt;= keys.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys[n]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//getItem方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItem = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> cookie[name] || <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// setItem方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setItem = <span class=\"function\">(<span class=\"params\">key,value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先判断要存储的cookie存在不,不存在先操作一次keys和length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(key <span class=\"keyword\">in</span> keys))&#123;</span><br><span class=\"line\">            keys.push(key)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.length++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 针对cookie对象做的操作</span></span><br><span class=\"line\">        cookie[key] = value</span><br><span class=\"line\">        <span class=\"comment\">//接下来就是正式操作浏览器中的cookie</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> domCookie = <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(value)&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxage) domCookie += <span class=\"string\">`; max-age=<span class=\"subst\">$&#123;maxage&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(path) domCookie += <span class=\"string\">`; path=<span class=\"subst\">$&#123;path&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = domCookie</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// removeCookie</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeItem = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(key <span class=\"keyword\">in</span> cookie)) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> cookie[key]</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length--</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = keys.indexOf(key)</span><br><span class=\"line\">        keys.splice(p,<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// clear</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.cookie = <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=; max-age=0`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cookie = &#123;&#125;</span><br><span class=\"line\">        keys = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>二十章讲的是客户端存储，很详细的介绍了常见的几种客户端存储的方式。涉及到一些同源策略的东西，所以就想看一下13章的安全性的问题。也记录一下</p>\n<h3 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h3><p>同源策略：脚本不能读取不同服务器载入的文档内容。比如说一个页面的脚本不能监听其他页面的用户输入信息，这就是同源策略。这么来看同源策略是必须的，不然浏览一个网页，所有的其他页面的信息都暴露了。<br>    但是确实有场景需要读取其他页面的属性，可以使用document的domain属性，domain默认是载入文档的主机名，可以人为设置，比如home.example.com可以设置成example.com。不能设置成home.example或者ample.com之类的，也必须有一个.（避免出现com的情况）如果2个窗口的domain一致，就没有同源限制啦。<br>    跨域资源共享：origin，请求头设置Access-Control-Allow-Origin</p>\n<h4 id=\"XSS-粗略了讲了一点安全问题\"><a href=\"#XSS-粗略了讲了一点安全问题\" class=\"headerlink\" title=\"XSS(粗略了讲了一点安全问题)\"></a>XSS(粗略了讲了一点安全问题)</h4><p>对于url:<a href=\"http://www.example.com/greet.html?David\" target=\"_blank\" rel=\"noopener\">http://www.example.com/greet.html?David</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">window</span>.location.search.substring(<span class=\"number\">1</span>)) <span class=\"comment\">// search可以拿到？之后的字段（可以理解为query字段？？？），转码之后可以拿到David</span></span><br><span class=\"line\">alert(name)</span><br></pre></td></tr></table></figure></p>\n<p>但是如果调用<a href=\"http://http.www.example.com/greet.html?name=%3Cscript\" target=\"_blank\" rel=\"noopener\">http://http.www.example.com/greet.html?name=%3Cscript</a> src=siteB/evil.js%3E%3C/script%3E<br>这样会注入一个来自siteB的脚本，脚本在sideB中，但是可以在A中进行操作，比较危险</p>\n<p>防止XSS的，通过不可信的数据来的时候，去掉里面的HTML标签（包括script标签）,<br>简单的实现安全函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = name.replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&lt;/g</span>,<span class=\"string\">'&gt;'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"localStorage和sessionStorage的区别\"><a href=\"#localStorage和sessionStorage的区别\" class=\"headerlink\" title=\"localStorage和sessionStorage的区别\"></a>localStorage和sessionStorage的区别</h3><p>两者的区别在于存储的<strong>有效期</strong>和<strong>作用域</strong>不同，也就是可以存储多长时间以及谁对数据有访问权。<br>storage都定义了存储、获取、删除的方法</p>\n<h4 id=\"有效期和作用域\"><a href=\"#有效期和作用域\" class=\"headerlink\" title=\"有效期和作用域\"></a>有效期和作用域</h4><p>localStorage的作用域是文档源级别。文档源就是协议主机和端口一致，也就是说同一个浏览器开多个窗口打开一个页面，是可以共享localStorage的。但是受浏览器供应商的限制。<br>sessionStorage的作用域也是文档源级别，但是不太相同，它是限定在窗口中的。在不同的标签中不共享。<br>sessionStorage在浏览器或者标签页关闭，sessionStorage里面存的数据会被删除。</p>\n<h4 id=\"存储的API\"><a href=\"#存储的API\" class=\"headerlink\" title=\"存储的API\"></a>存储的API</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">'x'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">localStorage.getItem(<span class=\"string\">'X'</span>)</span><br><span class=\"line\"><span class=\"comment\">/// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i= <span class=\"number\">0</span>; i&lt; localStorage.length; i++ )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = localStorage.key(i)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = localStorage.getItem(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">'X'</span>)    <span class=\"comment\">//删除X项</span></span><br><span class=\"line\">localStorage.clear()            <span class=\"comment\">//全部删除</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><h4 id=\"cookie属性：有效期和作用域\"><a href=\"#cookie属性：有效期和作用域\" class=\"headerlink\" title=\"cookie属性：有效期和作用域\"></a>cookie属性：有效期和作用域</h4><pre><code>cookie的默认有效期是浏览器的会话期间。但是和sessionStorage有区别，cookie不局限在浏览器单个窗口，有效期和整个浏览器的进程有关。\n通过max-age设置有效期设置有效期，他的作用域可以通过path和domain来配置，默认情况和创建他的web页面有关，对子页面可见。\n</code></pre><p><strong>如果路径设置成’/‘就和localStorage一样的作用域了</strong></p>\n<h4 id=\"保存cookie\"><a href=\"#保存cookie\" class=\"headerlink\" title=\"保存cookie\"></a>保存cookie</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cookie中不允许包含分毫、逗号和空白符，所以一般采用encodeURIComponent转码</span></span><br><span class=\"line\"><span class=\"comment\">// 最简单的cookie设置，浏览器关闭清除</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">'version='</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">document</span>.lastModified)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个可选max-age、path、domain、secure属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 通过设置domain可以解决cookie跨域的问题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> setCookie = (name, value, daysTolive, path, path) = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>=<span class=\"subst\">$&#123;encodeURLComponent(value)&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeOf daysToLive === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; max-age=<span class=\"subst\">$&#123;daysToLive * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(path)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; path=<span class=\"subst\">$&#123;path&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(domain)&#123;</span><br><span class=\"line\">        cookie += <span class=\"string\">`; domain=<span class=\"subst\">$&#123;domain&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"读取cookie\"><a href=\"#读取cookie\" class=\"headerlink\" title=\"读取cookie\"></a>读取cookie</h4><p>通过document.cookie读取出来的是一个字符串，不同键值对通过f分号和空格隔开。value的解码方式取决于之前存储用的方式，例如上面用到的setCookie中用的方式是encodeURIComponent编码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCookie = ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieObj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieStr = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cookieStr === <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookieArr = cookieStr.split(<span class=\"string\">'; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> _cookie <span class=\"keyword\">of</span> cookieArr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = _cookie.indexOf(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> name = _cookie.slice(<span class=\"number\">0</span>,p)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = _cookie.slice(p+<span class=\"number\">1</span>)</span><br><span class=\"line\">        value = <span class=\"built_in\">decodeURIComponent</span>(value)</span><br><span class=\"line\">        cookieObj[name] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"cookie相关的存储\"><a href=\"#cookie相关的存储\" class=\"headerlink\" title=\"cookie相关的存储\"></a>cookie相关的存储</h4><p>实现类似于sessionStorage的getItem、setItem、remove、delete等功能<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cookieStorage(maxage, path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//自执行函数实例化一个cookie对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = <span class=\"function\">(<span class=\"params\">(</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieObj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieStr = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cookieStr === <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cookieArr = cookieStr.split(<span class=\"string\">'; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> _cookie <span class=\"keyword\">of</span> cookieArr)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = _cookie.indexOf(<span class=\"string\">'='</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> name = _cookie.slice(<span class=\"number\">0</span>,p)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> value = _cookie.slice(p+<span class=\"number\">1</span>)</span><br><span class=\"line\">            value = <span class=\"built_in\">decodeURIComponent</span>(value)</span><br><span class=\"line\">            cookieObj[name] = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieObj</span><br><span class=\"line\">    &#125;())</span><br><span class=\"line\">    <span class=\"comment\">// 拿出所有的key</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(cookie)</span><br><span class=\"line\">    <span class=\"comment\">//存储API公共的属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = keys.length</span><br><span class=\"line\">    <span class=\"comment\">//返回第n个key的名字，即key方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">0</span> || n &gt;= keys.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys[n]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//getItem方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItem = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> cookie[name] || <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// setItem方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setItem = <span class=\"function\">(<span class=\"params\">key,value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先判断要存储的cookie存在不,不存在先操作一次keys和length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(key <span class=\"keyword\">in</span> keys))&#123;</span><br><span class=\"line\">            keys.push(key)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.length++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 针对cookie对象做的操作</span></span><br><span class=\"line\">        cookie[key] = value</span><br><span class=\"line\">        <span class=\"comment\">//接下来就是正式操作浏览器中的cookie</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> domCookie = <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(value)&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxage) domCookie += <span class=\"string\">`; max-age=<span class=\"subst\">$&#123;maxage&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(path) domCookie += <span class=\"string\">`; path=<span class=\"subst\">$&#123;path&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = domCookie</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// removeCookie</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeItem = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(key <span class=\"keyword\">in</span> cookie)) <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> cookie[key]</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length--</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = keys.indexOf(key)</span><br><span class=\"line\">        keys.splice(p,<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// clear</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.cookie = <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=; max-age=0`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cookie = &#123;&#125;</span><br><span class=\"line\">        keys = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjf2dos30000058qg3w26ipdh","category_id":"cjf2dos39000158qgyczvkjqc","_id":"cjf2dos3f000458qgmxnbky1v"},{"post_id":"cjf2dos4d000558qgs93agd9b","category_id":"cjf2dos39000158qgyczvkjqc","_id":"cjf2dos4s000d58qgscgnr1lv"},{"post_id":"cjf2dos4i000758qge262py5m","category_id":"cjf2dos4p000a58qg79rntk1v","_id":"cjf2dos4x000j58qg31d2egog"},{"post_id":"cjf2dos4m000958qgbi0no9rx","category_id":"cjf2dos4v000g58qgpcpl1nyl","_id":"cjf2dos50000o58qgbid9819b"},{"post_id":"cjf2dos4q000c58qg938ls7g7","category_id":"cjf2dos4v000g58qgpcpl1nyl","_id":"cjf2dos54000r58qgyi4i3lun"},{"post_id":"cjf2dos4s000e58qgjj4x5rgp","category_id":"cjf2dos50000n58qgo51jjtd8","_id":"cjf2dos57000v58qgg2vs3lyn"},{"post_id":"cjf2dos4u000f58qg2iscrxsc","category_id":"cjf2dos4v000g58qgpcpl1nyl","_id":"cjf2dos59000x58qghgf92451"}],"PostTag":[{"post_id":"cjf2dos30000058qg3w26ipdh","tag_id":"cjf2dos3c000258qgl7fhdnub","_id":"cjf2dos3d000358qgv1j4imcu"},{"post_id":"cjf2dos4d000558qgs93agd9b","tag_id":"cjf2dos3c000258qgl7fhdnub","_id":"cjf2dos4l000858qgv039jalb"},{"post_id":"cjf2dos4i000758qge262py5m","tag_id":"cjf2dos4q000b58qgshy1hx7y","_id":"cjf2dos4w000i58qg304jmxr7"},{"post_id":"cjf2dos4m000958qgbi0no9rx","tag_id":"cjf2dos4w000h58qgnjkoa2f4","_id":"cjf2dos4z000m58qgjt7vyqm8"},{"post_id":"cjf2dos4q000c58qg938ls7g7","tag_id":"cjf2dos4y000l58qgd81d5iir","_id":"cjf2dos52000q58qgakeig1oy"},{"post_id":"cjf2dos4s000e58qgjj4x5rgp","tag_id":"cjf2dos51000p58qgeumlxmf3","_id":"cjf2dos56000u58qgny4imiku"},{"post_id":"cjf2dos4u000f58qg2iscrxsc","tag_id":"cjf2dos4y000l58qgd81d5iir","_id":"cjf2dos58000w58qg47b3y7o8"}],"Tag":[{"name":"Javascript事件","_id":"cjf2dos3c000258qgl7fhdnub"},{"name":"页面布局","_id":"cjf2dos4q000b58qgshy1hx7y"},{"name":"es6","_id":"cjf2dos4w000h58qgnjkoa2f4"},{"name":"读书笔记","_id":"cjf2dos4y000l58qgd81d5iir"},{"name":"随便写写","_id":"cjf2dos51000p58qgeumlxmf3"}]}}